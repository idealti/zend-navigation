{
    "docs": [
        {
            "location": "/",
            "text": "../../README.md",
            "title": "Home"
        },
        {
            "location": "/intro/",
            "text": "Introduction\n\n\nzend-navigation manages trees of pointers to web pages. Simply put: It can be\nused for creating menus, breadcrumbs, links, and sitemaps, or serve as a model\nfor other navigation related purposes.\n\n\nPages and Containers\n\n\nThere are two main concepts in zend-navigation: pages and containers.\n\n\nPages\n\n\nA page (\nZend\\Navigation\\AbstractPage\n) in zend-navigation, in its most basic\nform, is an object that holds a pointer to a web page. In addition to the\npointer itself, the page object contains a number of other properties that are\ntypically relevant for navigation, such as \nlabel\n, \ntitle\n, etc.\n\n\nRead more about pages in the \npages\n section.\n\n\nContainers\n\n\nA navigation container (\nZend\\Navigation\\AbstractContainer\n) holds pages. It has\nmethods for adding, retrieving, deleting and iterating pages. It implements the\n\nSPL\n interfaces \nRecursiveIterator\n and \nCountable\n, and\ncan thus be iterated with SPL iterators such as \nRecursiveIteratorIterator\n.\n\n\nRead more about containers in the \ncontainers\n section.\n\n\n\n\nPages are containers\n\n\nZend\\Navigation\\AbstractPage\n extends \nZend\\Navigation\\AbstractContainer\n,\nwhich means that a page can have sub pages.\n\n\n\n\nView Helpers\n\n\nSeparation of data (model) and rendering (view)\n\n\nClasses in the zend-navigation namespace do not deal with rendering of\nnavigational elements.  Rendering is done with navigational view helpers.\nHowever, pages contain information that is used by view helpers when rendering,\nsuch as \nlabel\n, \nclass\n (CSS), \ntitle\n, \nlastmod\n, and \npriority\n properties\nfor sitemaps, etc.\n\n\nRead more about rendering navigational elements in the\n\nview helpers\n section.",
            "title": "Intro"
        },
        {
            "location": "/intro/#introduction",
            "text": "zend-navigation manages trees of pointers to web pages. Simply put: It can be\nused for creating menus, breadcrumbs, links, and sitemaps, or serve as a model\nfor other navigation related purposes.",
            "title": "Introduction"
        },
        {
            "location": "/intro/#pages-and-containers",
            "text": "There are two main concepts in zend-navigation: pages and containers.",
            "title": "Pages and Containers"
        },
        {
            "location": "/intro/#pages",
            "text": "A page ( Zend\\Navigation\\AbstractPage ) in zend-navigation, in its most basic\nform, is an object that holds a pointer to a web page. In addition to the\npointer itself, the page object contains a number of other properties that are\ntypically relevant for navigation, such as  label ,  title , etc.  Read more about pages in the  pages  section.",
            "title": "Pages"
        },
        {
            "location": "/intro/#containers",
            "text": "A navigation container ( Zend\\Navigation\\AbstractContainer ) holds pages. It has\nmethods for adding, retrieving, deleting and iterating pages. It implements the SPL  interfaces  RecursiveIterator  and  Countable , and\ncan thus be iterated with SPL iterators such as  RecursiveIteratorIterator .  Read more about containers in the  containers  section.",
            "title": "Containers"
        },
        {
            "location": "/intro/#pages-are-containers",
            "text": "Zend\\Navigation\\AbstractPage  extends  Zend\\Navigation\\AbstractContainer ,\nwhich means that a page can have sub pages.",
            "title": "Pages are containers"
        },
        {
            "location": "/intro/#view-helpers",
            "text": "",
            "title": "View Helpers"
        },
        {
            "location": "/intro/#separation-of-data-model-and-rendering-view",
            "text": "Classes in the zend-navigation namespace do not deal with rendering of\nnavigational elements.  Rendering is done with navigational view helpers.\nHowever, pages contain information that is used by view helpers when rendering,\nsuch as  label ,  class  (CSS),  title ,  lastmod , and  priority  properties\nfor sitemaps, etc.  Read more about rendering navigational elements in the view helpers  section.",
            "title": "Separation of data (model) and rendering (view)"
        },
        {
            "location": "/quick-start/",
            "text": "Quick Start\n\n\nUsage in a zend-mvc-based application\n\n\nThe fastest way to get up and running with zend-navigation is:\n\n\n\n\nRegister zend-navigation as module.\n\n\nDefine navigation container configuration under the top-level \nnavigation\n key\n  in your application configuration.\n\n\nRender your container using a navigation view helper within your view scripts.\n\n\n\n\nRegister zend-navigation as module\n\n\nEdit the application configuration file \nconfig/application.config.php\n:\n\n\n<?php\nreturn [\n    'modules' => [\n        'Zend\\Router',\n        'Zend\\Log',\n        'Zend\\Navigation', // <-- Add this line\n        // ...\n    ],\n];\n\n\n\nNavigation container configuration\n\n\nAdd the container definition to your configuration file, e.g.\n\nconfig/autoload/global.php\n:\n\n\n<?php\nreturn [\n    // ...\n\n    'navigation' => [\n        'default' => [\n            [\n                'label' => 'Home',\n                'route' => 'home',\n            ],\n            [\n                'label' => 'Page #1',\n                'route' => 'page-1',\n                'pages' => [\n                    [\n                        'label' => 'Child #1',\n                        'route' => 'page-1-child',\n                    ],\n                ],\n            ],\n            [\n                'label' => 'Page #2',\n                'route' => 'page-2',\n            ],\n        ],\n    ],\n    // ...\n];\n\n\n\nRender the navigation\n\n\nCalling the view helper for menus in your layout script:\n\n\n<!-- ... -->\n\n<body>\n    <?= $this->navigation('default')->menu() ?>\n</body>\n<!-- ... -->\n\n\n\nUsing multiple navigations\n\n\nOnce the zend-navigation module is registered, you can create as many navigation\ndefinitions as you wish, and the underlying factories will create navigation\ncontainers automatically.\n\n\nAdd the container definitions to your configuration file, e.g.\n\nconfig/autoload/global.php\n:\n\n\n<?php\nreturn [\n    // ...\n\n    'navigation' => [\n\n        // Navigation with name default\n        'default' => [\n            [\n                'label' => 'Home',\n                'route' => 'home',\n            ],\n            [\n                'label' => 'Page #1',\n                'route' => 'page-1',\n                'pages' => [\n                    [\n                        'label' => 'Child #1',\n                        'route' => 'page-1-child',\n                    ],\n                ],\n            ],\n            [\n                'label' => 'Page #2',\n                'route' => 'page-2',\n            ],\n        ],\n\n        // Navigation with name special\n        'special' => [\n            [\n                'label' => 'Special',\n                'route' => 'special',\n            ],\n            [\n                'label' => 'Special Page #2',\n                'route' => 'special-2',\n            ],\n        ],\n\n        // Navigation with name sitemap\n        'sitemap' => [\n            [\n                'label' => 'Sitemap',\n                'route' => 'sitemap',\n            ],\n            [\n                'label' => 'Sitemap Page #2',\n                'route' => 'sitemap-2',\n            ],\n        ],\n    ],\n    // ...\n];\n\n\n\n\n\nContainer names have a prefix\n\n\nThere is one important point to know when using zend-navigation as a module:\nThe name of the container in your view script \nmust\n be prefixed with\n\nZend\\Navigation\\\n, followed by the name of the configuration key.\nThis helps ensure that no naming collisions occur with other services.\n\n\n\n\nThe following example demonstrates rendering the navigation menus for the named\n\ndefault\n, \nspecial\n, and \nsitemap\n containers.\n\n\n<!-- ... -->\n\n<body>\n    <?= $this->navigation('Zend\\Navigation\\Default')->menu() ?>\n\n    <?= $this->navigation('Zend\\Navigation\\Special')->menu() ?>\n\n    <?= $this->navigation('Zend\\Navigation\\Sitemap')->menu() ?>\n</body>\n<!-- ... -->",
            "title": "Quick Start"
        },
        {
            "location": "/quick-start/#quick-start",
            "text": "",
            "title": "Quick Start"
        },
        {
            "location": "/quick-start/#usage-in-a-zend-mvc-based-application",
            "text": "The fastest way to get up and running with zend-navigation is:   Register zend-navigation as module.  Define navigation container configuration under the top-level  navigation  key\n  in your application configuration.  Render your container using a navigation view helper within your view scripts.",
            "title": "Usage in a zend-mvc-based application"
        },
        {
            "location": "/quick-start/#register-zend-navigation-as-module",
            "text": "Edit the application configuration file  config/application.config.php :  <?php\nreturn [\n    'modules' => [\n        'Zend\\Router',\n        'Zend\\Log',\n        'Zend\\Navigation', // <-- Add this line\n        // ...\n    ],\n];",
            "title": "Register zend-navigation as module"
        },
        {
            "location": "/quick-start/#navigation-container-configuration",
            "text": "Add the container definition to your configuration file, e.g. config/autoload/global.php :  <?php\nreturn [\n    // ...\n\n    'navigation' => [\n        'default' => [\n            [\n                'label' => 'Home',\n                'route' => 'home',\n            ],\n            [\n                'label' => 'Page #1',\n                'route' => 'page-1',\n                'pages' => [\n                    [\n                        'label' => 'Child #1',\n                        'route' => 'page-1-child',\n                    ],\n                ],\n            ],\n            [\n                'label' => 'Page #2',\n                'route' => 'page-2',\n            ],\n        ],\n    ],\n    // ...\n];",
            "title": "Navigation container configuration"
        },
        {
            "location": "/quick-start/#render-the-navigation",
            "text": "Calling the view helper for menus in your layout script:  <!-- ... -->\n\n<body>\n    <?= $this->navigation('default')->menu() ?>\n</body>\n<!-- ... -->",
            "title": "Render the navigation"
        },
        {
            "location": "/quick-start/#using-multiple-navigations",
            "text": "Once the zend-navigation module is registered, you can create as many navigation\ndefinitions as you wish, and the underlying factories will create navigation\ncontainers automatically.  Add the container definitions to your configuration file, e.g. config/autoload/global.php :  <?php\nreturn [\n    // ...\n\n    'navigation' => [\n\n        // Navigation with name default\n        'default' => [\n            [\n                'label' => 'Home',\n                'route' => 'home',\n            ],\n            [\n                'label' => 'Page #1',\n                'route' => 'page-1',\n                'pages' => [\n                    [\n                        'label' => 'Child #1',\n                        'route' => 'page-1-child',\n                    ],\n                ],\n            ],\n            [\n                'label' => 'Page #2',\n                'route' => 'page-2',\n            ],\n        ],\n\n        // Navigation with name special\n        'special' => [\n            [\n                'label' => 'Special',\n                'route' => 'special',\n            ],\n            [\n                'label' => 'Special Page #2',\n                'route' => 'special-2',\n            ],\n        ],\n\n        // Navigation with name sitemap\n        'sitemap' => [\n            [\n                'label' => 'Sitemap',\n                'route' => 'sitemap',\n            ],\n            [\n                'label' => 'Sitemap Page #2',\n                'route' => 'sitemap-2',\n            ],\n        ],\n    ],\n    // ...\n];",
            "title": "Using multiple navigations"
        },
        {
            "location": "/quick-start/#container-names-have-a-prefix",
            "text": "There is one important point to know when using zend-navigation as a module:\nThe name of the container in your view script  must  be prefixed with Zend\\Navigation\\ , followed by the name of the configuration key.\nThis helps ensure that no naming collisions occur with other services.   The following example demonstrates rendering the navigation menus for the named default ,  special , and  sitemap  containers.  <!-- ... -->\n\n<body>\n    <?= $this->navigation('Zend\\Navigation\\Default')->menu() ?>\n\n    <?= $this->navigation('Zend\\Navigation\\Special')->menu() ?>\n\n    <?= $this->navigation('Zend\\Navigation\\Sitemap')->menu() ?>\n</body>\n<!-- ... -->",
            "title": "Container names have a prefix"
        },
        {
            "location": "/pages/",
            "text": "Pages\n\n\nzend-navigation ships with two page types:\n\n\n\n\nMVC pages\n, using the class \nZend\\Navigation\\Page\\Mvc\n\n\nURI pages\n, using the class \nZend\\Navigation\\Page\\Uri\n\n\n\n\nMVC pages link to on-site web pages, and are defined using MVC parameters\n(\naction\n, \ncontroller\n, \nroute\n, \nparams\n). URI pages are defined by a single\nproperty \nuri\n, which give you the full flexibility to link off-site pages or do\nother things with the generated links (e.g. a URI that turns into \n<a href=\"#\">foo<a>\n).\n\n\nCommon page features\n\n\nAll page classes must extend \nZend\\Navigation\\Page\\AbstractPage\n, and will thus\nshare a common set of features and properties. Most notably, they share the\noptions in the table below and the same initialization process.\n\n\nOption keys are mapped to \nset*()\n methods. This means that the option \norder\n maps to the method\n\nsetOrder()\n, and \nreset_params\n maps to the method \nsetResetParams()\n. If there is no setter\nmethod for the option, it will be set as a custom property of the page.\n\n\nRead more on extending \nZend\\Navigation\\Page\\AbstractPage\n in the section\n\n\"Creating custom page types\"\n.\n\n\nCommon page options\n\n\n\n\n\n\n\n\nKey\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nNULL\n\n\nA page label, such as 'Home' or 'Blog'.\n\n\n\n\n\n\nfragment\n\n\nstring\\|null\n\n\nNULL\n\n\nA fragment identifier (anchor identifier) pointing to an anchor within a resource that is subordinate to another, primary resource. The fragment identifier introduced by a hash mark \"#\". Example: \nhttp://www.example.org/foo.html#bar\n (\nbar\n is the fragment identifier)\n\n\n\n\n\n\nid\n\n\nstring\\|integer\n\n\nNULL\n\n\nAn \nid\n tag/attribute that may be used when rendering the page, typically in an anchor element.\n\n\n\n\n\n\nclass\n\n\nstring\n\n\nNULL\n\n\nA \nCSS\n class that may be used when rendering the page, typically in an anchor element.\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\nNULL\n\n\nA short page description, typically for using as the title attribute in an anchor.\n\n\n\n\n\n\ntarget\n\n\nstring\n\n\nNULL\n\n\nSpecifies a target that may be used for the page, typically in an anchor element.\n\n\n\n\n\n\nrel\n\n\narray\n\n\n[]\n\n\nSpecifies forward relations for the page. Each element in the array is a key-value pair, where the key designates the relation/link type, and the value is a pointer to the linked page. An example of a key-value pair is \n'alternate' => 'format/plain.html'\n. To allow full flexibility, there are no restrictions on relation values. The value does not have to be a string. Read more about \nrel\n and \nrev\n in the section on the Links helper.\n\n\n\n\n\n\nrev\n\n\narray\n\n\n[]\n\n\nSpecifies reverse relations for the page. Works exactly like rel.\n\n\n\n\n\n\norder\n\n\nstring\\|integer\\|null\n\n\nNULL\n\n\nWorks like order for elements in \nZend\\Form\n. If specified, the page will be iterated in a specific order, meaning you can force a page to be iterated before others by setting the order attribute to a low number, e.g. -100. If a String is given, it must parse to a valid int. If \nNULL\n is given, it will be reset, meaning the order in which the page was added to the container will be used.\n\n\n\n\n\n\nresource\n\n\nstring\\|Zend\\Permissions\\Acl\\Resource\\ResourceInterface\\|null\n\n\nNULL\n\n\nACL resource to associate with the page. Read more in the section on ACL integration in view helpers.\n\n\n\n\n\n\nprivilege\n\n\nstring\\|null\n\n\nNULL\n\n\nACL privilege to associate with the page. Read more in the section on ACL integration in view helpers.\n\n\n\n\n\n\nactive\n\n\nboolean\n\n\nFALSE\n\n\nWhether the page should be considered active for the current request. If active is FALSE or not given, MVC pages will check its properties against the request object upon calling \n$page->isActive()\n.\n\n\n\n\n\n\nvisible\n\n\nboolean\n\n\nTRUE\n\n\nWhether page should be visible for the user, or just be a part of the structure. Invisible pages are skipped by view helpers.\n\n\n\n\n\n\npages\n\n\narray\\|Travsersable\\|null\n\n\nNULL\n\n\nChild pages of the page. This could be an array or \nTraversable\n object containing either page options that can be passed to the \nfactory()\n method, \nAbstractPage\n instances, or a mixture of both.\n\n\n\n\n\n\n\n\n\n\nCustom properties\n\n\nAll pages support setting and retrieval of custom properties by use of the\nmagic methods \n__set($name, $value)\n, \n__get($name)\n, \n__isset($name)\n and\n\n__unset($name)\n. Custom properties may have any value, and will be included\nin the array that is returned from \n$page->toArray()\n, which means that pages\ncan be serialized/deserialized successfully even if the pages contains\nproperties that are not native in the page class.\n\n\nBoth native and custom properties can be set using \n$page->set($name, $value)\n\nand retrieved using \n$page->get($name)\n, or by using magic methods.\n\n\nThe following example demonstrates custom properties:\n\n\n$page = new Zend\\Navigation\\Page\\Mvc();\n$page->foo     = 'bar';\n$page->meaning = 42;\n\necho $page->foo;\n\nif ($page->meaning != 42) {\n    // action should be taken\n}\n\n\n\n\n\nMVC pages\n\n\nMVC pages are defined using MVC parameters known from the\n\nzend-mvc\n component. An MVC page\nwill use \nZend\\Router\\RouteStackInterface\n internally in the \ngetHref()\n method\nto generate \nhref\n attributes, and the \nisActive()\n method will compare the\n\nZend\\Router\\RouteMatch\n params with the page's params to determine if the page\nis active.\n\n\n\n\nuseRouteMatch flag\n\n\nStarting in version 2.2.0, if you want to re-use any matched route parameters\nwhen generating a link, you can do so via the \nuseRouteMatch\n flag. This is\nparticularly useful when creating segment routes that include the currently\nselected language or locale as an initial segment, as it ensures the links\ngenerated all include the matched value.\n\n\n\n\nMVC page options\n\n\n\n\n\n\n\n\nKey\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naction\n\n\nstring\n\n\nNULL\n\n\nAction name to use when generating \nhref\n to the page.\n\n\n\n\n\n\ncontroller\n\n\nstring\n\n\nNULL\n\n\nController name to use when generating \nhref\n to the page.\n\n\n\n\n\n\nparams\n\n\narray\n\n\n[]\n\n\nUser params to use when generating \nhref\n to the page.\n\n\n\n\n\n\nroute\n\n\nstring\n\n\nNULL\n\n\nRoute name to use when generating \nhref\n to the page.\n\n\n\n\n\n\nrouteMatch\n\n\nZend\\Router\\RouteMatch\n\n\nNULL\n\n\nRouteInterface\n matches used for routing parameters and testing validity.\n\n\n\n\n\n\nuseRouteMatch\n\n\nboolean\n\n\nFALSE\n\n\nIf true, then the \ngetHref()\n method will use the \nrouteMatch\n parameters to assemble the URI.\n\n\n\n\n\n\nrouter\n\n\nZend\\Router\\RouteStackInterface\n\n\nNULL\n\n\nRouter for assembling URLs.\n\n\n\n\n\n\nquery\n\n\narray\n\n\n[]\n\n\nQuery string arguments to use when generating \nhref\n to page.\n\n\n\n\n\n\n\n\n\n\nURIs are relative to base URL\n\n\nThe URI returned is relative to the \nbaseUrl\n in \nZend\\Router\\Http\\TreeRouteStack\n.\nIn the examples, the \nbaseUrl\n is '/' for simplicity.\n\n\n\n\ngetHref() generates the page URI\n\n\nThis example demonstrates that MVC pages use \nZend\\Router\\RouteStackInterface\n\ninternally to generate URIs when calling \n$page->getHref()\n.\n\n\nuse Zend\\Navigation\\Page;\nuse Zend\\Router\\Http\\Segment;\nuse Zend\\Router\\Http\\TreeRouteStack;\n\n// Create route\n$route = Segment::factory([\n   'route'       => '/[:controller[/:action][/:id]]',\n   'constraints' => [\n      'controller' => '[a-zA-Z][a-zA-Z0-9_-]+',\n      'action'     => '[a-zA-Z][a-zA-Z0-9_-]+',\n      'id'         => '[0-9]+',\n   ],\n   [\n      'controller' => 'Album\\Controller\\Album',\n      'action'     => 'index',\n   ]\n]);\n$router = new TreeRouteStack();\n$router->addRoute('default', $route);\n\n// getHref() returns /album/add\n$page = new Page\\Mvc([\n    'action'     => 'add',\n    'controller' => 'album',\n]);\n\n// getHref() returns /album/edit/1337\n$page = new Page\\Mvc([\n    'action'     => 'edit',\n    'controller' => 'album',\n    'params'     => ['id' => 1337],\n]);\n\n // getHref() returns /album/1337?format=json\n$page = new Page\\Mvc([\n    'action'     => 'edit',\n    'controller' => 'album',\n    'params'     => ['id' => 1337],\n    'query'      => ['format' => 'json'],\n]);\n\n\n\nisActive() determines if page is active\n\n\nThis example demonstrates that MVC pages determine whether they are active by\nusing the params found in the route match object.\n\n\nuse Zend\\Navigation\\Page;\n\n/**\n * Dispatched request:\n * - controller: album\n * - action:     index\n */\n$page1 = new Page\\Mvc([\n    'action'     => 'index',\n    'controller' => 'album',\n]);\n\n$page2 = new Page\\Mvc([\n    'action'     => 'edit',\n    'controller' => 'album',\n]);\n\n$page1->isActive(); // returns true\n$page2->isActive(); // returns false\n\n/**\n * Dispatched request:\n * - controller: album\n * - action:     edit\n * - id:         1337\n */\n$page = new Page\\Mvc([\n    'action'     => 'edit',\n    'controller' => 'album',\n    'params'     => ['id' => 1337],\n]);\n\n// returns true, because request has the same controller and action\n$page->isActive();\n\n/**\n * Dispatched request:\n * - controller: album\n * - action:     edit\n */\n$page = new Page\\Mvc([\n    'action'     => 'edit',\n    'controller' => 'album',\n    'params'     => ['id' => null],\n]);\n\n// returns false, because page requires the id param to be set in the request\n$page->isActive(); // returns false\n\n\n\nUsing routes\n\n\nRoutes can be used with MVC pages. If a page has a route, this route will be\nused in \ngetHref()\n to generate the URL for the page.\n\n\n\n\nDefault parameters are not necessary\n\n\nNote that when using the \nroute\n property in a page, you do not need to\nspecify the default params that the route defines (controller, action, etc.).\n\n\n\n\nuse Zend\\Navigation\\Page;\nuse Zend\\Router\\Http\\Segment;\nuse Zend\\Router\\Http\\TreeRouteStack;\n\n// the following route is added to the ZF router\n$route = Segment::factory([\n   'route'       => '/a/:id',\n   'constraints' => [\n      'id' => '[0-9]+',\n   ],\n   [\n      'controller' => 'Album\\Controller\\Album',\n      'action'     => 'show',\n   ]\n]);\n$router = new TreeRouteStack();\n$router->addRoute('albumShow', $route);\n\n// a page is created with a 'route' option\n$page = new Page\\Mvc([\n    'label'      => 'Show album',\n    'route'      => 'albumShow',\n    'params'     => ['id' => 42]\n]);\n\n// returns: /a/42\n$page->getHref();\n\n\n\nURI Pages\n\n\nPages of type \nZend\\Navigation\\Page\\Uri\n can be used to link to pages on other\ndomains or sites, or to implement custom logic for the page. In addition to the\ncommon page options, a URI page takes only one additional option, a \nuri\n. The\n\nuri\n will be returned when calling \n$page->getHref()\n, and may be a \nstring\n or\n\nnull\n.\n\n\n\n\nNo auto-determination of active status\n\n\nZend\\Navigation\\Page\\Uri\n will not try to determine whether it should be\nactive when calling \n$page->isActive()\n; it merely returns what currently is\nset. In order to make a URI page active, you must manually call\n\n$page->setActive()\n or specify the \nactive\n as a page option during\ninstantiation.\n\n\n\n\nURI page options\n\n\n\n\n\n\n\n\nKey\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuri\n\n\nstring\n\n\nNULL\n\n\nURI to page. This can be any string or \nNULL\n.\n\n\n\n\n\n\n\n\nCreating custom page types\n\n\nWhen extending \nZend\\Navigation\\Page\\AbstractPage\n, there is usually no need to\noverride the constructor or the \nsetOptions()\n method. The page constructor\ntakes a single parameter, an \narray\n or a \nTraversable\n object, which is then\npassed to \nsetOptions()\n. That method will in turn call the appropriate \nset*()\n\nmethods based on the options provided, which in turn maps the option to native\nor custom properties. If the option \ninternal_id\n is given, the method will\nfirst look for a method named \nsetInternalId()\n, and pass the option to this\nmethod if it exists. If the method does not exist, the option will be set as a\ncustom property of the page, and be accessible via \n$internalId =\n$page->internal_id;\n or \n$internalId = $page->get('internal_id');\n.\n\n\nBasic custom page example\n\n\nThe only thing a custom page class needs to implement is the \ngetHref()\n method.\n\n\nnamespace My;\n\nuse Zend\\Navigation\\Page\\AbstractPage;\n\nclass Page extends AbstractPage\n{\n    public function getHref()\n    {\n        return 'something-completely-different';\n    }\n}\n\n\n\nA custom page with properties\n\n\nWhen adding properties to an extended page, there is no need to override/modify\n\nsetOptions()\n.\n\n\nnamespace My\\Navigation;\n\nuse Zend\\Navigation\\Page\\AbstractPage;\n\nclass Page extends AbstractPage\n{\n    protected $foo;\n    protected $fooBar;\n\n    public function setFoo($foo)\n    {\n        $this->foo = $foo;\n    }\n\n    public function getFoo()\n    {\n        return $this->foo;\n    }\n\n    public function setFooBar($fooBar)\n    {\n        $this->fooBar = $fooBar;\n    }\n\n    public function getFooBar()\n    {\n        return $this->fooBar;\n    }\n\n    public function getHref()\n    {\n        return sprintf('%s/%s', $this->foo, $this->fooBar);\n    }\n}\n\n// Instantiation:\n$page = new Page([\n    'label'   => 'Property names are mapped to setters',\n    'foo'     => 'bar',\n    'foo_bar' => 'baz',\n]);\n\n\n\nCreating pages using the page factory\n\n\nAll pages (also custom classes), can be created using the page factory,\n\nZend\\Navigation\\Page\\AbstractPage::factory()\n. The factory accepts either an\narray or \nTraversable\n set of options.  Each key in the options corresponds to a\npage option, as seen earlier.  If the option \nuri\n is given and no MVC options\nare provided (e.g., \naction\n, \ncontroller\n, \nroute\n), a URI page will be\ncreated. If any of the MVC options are given, an MVC page will be created.\n\n\nIf \ntype\n is given, the factory will assume the value to be the name of the\nclass that should be created. If the value is \nmvc\n or \nuri\n, an MVC or URI page\nwill be created, respectively.\n\n\nCreating an MVC page using the page factory\n\n\nuse Zend\\Navigation\\Page\\AbstractPage;\n\n// MVC page, as \"action\" is defined\n$page = AbstractPage::factory([\n    'label'  => 'My MVC page',\n    'action' => 'index',\n]);\n\n// MVC page, as \"action\" and \"controller\" are defined\n$page = AbstractPage::factory([\n    'label'      => 'Search blog',\n    'action'     => 'index',\n    'controller' => 'search',\n]);\n\n// MVC page, as \"route\" is defined\n$page = AbstractPage::factory([\n    'label' => 'Home',\n    'route' => 'home',\n]);\n\n// MVC page, as \"type\" is \"mvc\"\n$page = AbstractPage::factory([\n    'type'   => 'mvc',\n    'label'  => 'My MVC page',\n]);\n\n\n\nCreating a URI page using the page factory\n\n\nuse Zend\\Navigation\\Page\\AbstractPage;\n\n// URI page, as \"uri\" is present, with now MVC options\n$page = AbstractPage::factory([\n    'label' => 'My URI page',\n    'uri'   => 'http://www.example.com/',\n]);\n\n// URI page, as \"uri\" is present, with now MVC options\n$page = AbstractPage::factory([\n    'label'  => 'Search',\n    'uri'    => 'http://www.example.com/search',\n    'active' => true,\n]);\n\n// URI page, as \"uri\" is present, with now MVC options\n$page = AbstractPage::factory([\n    'label' => 'My URI page',\n    'uri'   => '#',\n]);\n\n// URI page, as \"type\" is \"uri\"\n$page = AbstractPage::factory([\n    'type'  => 'uri',\n    'label' => 'My URI page',\n]);\n\n\n\nCreating a custom page type using the page factory\n\n\nTo create a custom page type using the factory, use the option \ntype\n to specify\na class name to instantiate.\n\n\nnamespace My\\Navigation;\n\nuse Zend\\Navigation\\Page\\AbstractPage;\n\nclass Page extends AbstractPage\n{\n    protected $fooBar = 'ok';\n\n    public function setFooBar($fooBar)\n    {\n        $this->fooBar = $fooBar;\n    }\n}\n\n// Creates Page instance, as \"type\" refers to its class.\n$page = AbstractPage::factory([\n    'type'    => Page::class,\n    'label'   => 'My custom page',\n    'foo_bar' => 'foo bar',\n]);",
            "title": "Pages"
        },
        {
            "location": "/pages/#pages",
            "text": "zend-navigation ships with two page types:   MVC pages , using the class  Zend\\Navigation\\Page\\Mvc  URI pages , using the class  Zend\\Navigation\\Page\\Uri   MVC pages link to on-site web pages, and are defined using MVC parameters\n( action ,  controller ,  route ,  params ). URI pages are defined by a single\nproperty  uri , which give you the full flexibility to link off-site pages or do\nother things with the generated links (e.g. a URI that turns into  <a href=\"#\">foo<a> ).",
            "title": "Pages"
        },
        {
            "location": "/pages/#common-page-features",
            "text": "All page classes must extend  Zend\\Navigation\\Page\\AbstractPage , and will thus\nshare a common set of features and properties. Most notably, they share the\noptions in the table below and the same initialization process.  Option keys are mapped to  set*()  methods. This means that the option  order  maps to the method setOrder() , and  reset_params  maps to the method  setResetParams() . If there is no setter\nmethod for the option, it will be set as a custom property of the page.  Read more on extending  Zend\\Navigation\\Page\\AbstractPage  in the section \"Creating custom page types\" .",
            "title": "Common page features"
        },
        {
            "location": "/pages/#common-page-options",
            "text": "Key  Type  Default  Description      label  string  NULL  A page label, such as 'Home' or 'Blog'.    fragment  string\\|null  NULL  A fragment identifier (anchor identifier) pointing to an anchor within a resource that is subordinate to another, primary resource. The fragment identifier introduced by a hash mark \"#\". Example:  http://www.example.org/foo.html#bar  ( bar  is the fragment identifier)    id  string\\|integer  NULL  An  id  tag/attribute that may be used when rendering the page, typically in an anchor element.    class  string  NULL  A  CSS  class that may be used when rendering the page, typically in an anchor element.    title  string  NULL  A short page description, typically for using as the title attribute in an anchor.    target  string  NULL  Specifies a target that may be used for the page, typically in an anchor element.    rel  array  []  Specifies forward relations for the page. Each element in the array is a key-value pair, where the key designates the relation/link type, and the value is a pointer to the linked page. An example of a key-value pair is  'alternate' => 'format/plain.html' . To allow full flexibility, there are no restrictions on relation values. The value does not have to be a string. Read more about  rel  and  rev  in the section on the Links helper.    rev  array  []  Specifies reverse relations for the page. Works exactly like rel.    order  string\\|integer\\|null  NULL  Works like order for elements in  Zend\\Form . If specified, the page will be iterated in a specific order, meaning you can force a page to be iterated before others by setting the order attribute to a low number, e.g. -100. If a String is given, it must parse to a valid int. If  NULL  is given, it will be reset, meaning the order in which the page was added to the container will be used.    resource  string\\|Zend\\Permissions\\Acl\\Resource\\ResourceInterface\\|null  NULL  ACL resource to associate with the page. Read more in the section on ACL integration in view helpers.    privilege  string\\|null  NULL  ACL privilege to associate with the page. Read more in the section on ACL integration in view helpers.    active  boolean  FALSE  Whether the page should be considered active for the current request. If active is FALSE or not given, MVC pages will check its properties against the request object upon calling  $page->isActive() .    visible  boolean  TRUE  Whether page should be visible for the user, or just be a part of the structure. Invisible pages are skipped by view helpers.    pages  array\\|Travsersable\\|null  NULL  Child pages of the page. This could be an array or  Traversable  object containing either page options that can be passed to the  factory()  method,  AbstractPage  instances, or a mixture of both.",
            "title": "Common page options"
        },
        {
            "location": "/pages/#custom-properties",
            "text": "All pages support setting and retrieval of custom properties by use of the\nmagic methods  __set($name, $value) ,  __get($name) ,  __isset($name)  and __unset($name) . Custom properties may have any value, and will be included\nin the array that is returned from  $page->toArray() , which means that pages\ncan be serialized/deserialized successfully even if the pages contains\nproperties that are not native in the page class.  Both native and custom properties can be set using  $page->set($name, $value) \nand retrieved using  $page->get($name) , or by using magic methods.  The following example demonstrates custom properties:  $page = new Zend\\Navigation\\Page\\Mvc();\n$page->foo     = 'bar';\n$page->meaning = 42;\n\necho $page->foo;\n\nif ($page->meaning != 42) {\n    // action should be taken\n}",
            "title": "Custom properties"
        },
        {
            "location": "/pages/#mvc-pages",
            "text": "MVC pages are defined using MVC parameters known from the zend-mvc  component. An MVC page\nwill use  Zend\\Router\\RouteStackInterface  internally in the  getHref()  method\nto generate  href  attributes, and the  isActive()  method will compare the Zend\\Router\\RouteMatch  params with the page's params to determine if the page\nis active.",
            "title": "MVC pages"
        },
        {
            "location": "/pages/#useroutematch-flag",
            "text": "Starting in version 2.2.0, if you want to re-use any matched route parameters\nwhen generating a link, you can do so via the  useRouteMatch  flag. This is\nparticularly useful when creating segment routes that include the currently\nselected language or locale as an initial segment, as it ensures the links\ngenerated all include the matched value.",
            "title": "useRouteMatch flag"
        },
        {
            "location": "/pages/#mvc-page-options",
            "text": "Key  Type  Default  Description      action  string  NULL  Action name to use when generating  href  to the page.    controller  string  NULL  Controller name to use when generating  href  to the page.    params  array  []  User params to use when generating  href  to the page.    route  string  NULL  Route name to use when generating  href  to the page.    routeMatch  Zend\\Router\\RouteMatch  NULL  RouteInterface  matches used for routing parameters and testing validity.    useRouteMatch  boolean  FALSE  If true, then the  getHref()  method will use the  routeMatch  parameters to assemble the URI.    router  Zend\\Router\\RouteStackInterface  NULL  Router for assembling URLs.    query  array  []  Query string arguments to use when generating  href  to page.",
            "title": "MVC page options"
        },
        {
            "location": "/pages/#uris-are-relative-to-base-url",
            "text": "The URI returned is relative to the  baseUrl  in  Zend\\Router\\Http\\TreeRouteStack .\nIn the examples, the  baseUrl  is '/' for simplicity.",
            "title": "URIs are relative to base URL"
        },
        {
            "location": "/pages/#gethref-generates-the-page-uri",
            "text": "This example demonstrates that MVC pages use  Zend\\Router\\RouteStackInterface \ninternally to generate URIs when calling  $page->getHref() .  use Zend\\Navigation\\Page;\nuse Zend\\Router\\Http\\Segment;\nuse Zend\\Router\\Http\\TreeRouteStack;\n\n// Create route\n$route = Segment::factory([\n   'route'       => '/[:controller[/:action][/:id]]',\n   'constraints' => [\n      'controller' => '[a-zA-Z][a-zA-Z0-9_-]+',\n      'action'     => '[a-zA-Z][a-zA-Z0-9_-]+',\n      'id'         => '[0-9]+',\n   ],\n   [\n      'controller' => 'Album\\Controller\\Album',\n      'action'     => 'index',\n   ]\n]);\n$router = new TreeRouteStack();\n$router->addRoute('default', $route);\n\n// getHref() returns /album/add\n$page = new Page\\Mvc([\n    'action'     => 'add',\n    'controller' => 'album',\n]);\n\n// getHref() returns /album/edit/1337\n$page = new Page\\Mvc([\n    'action'     => 'edit',\n    'controller' => 'album',\n    'params'     => ['id' => 1337],\n]);\n\n // getHref() returns /album/1337?format=json\n$page = new Page\\Mvc([\n    'action'     => 'edit',\n    'controller' => 'album',\n    'params'     => ['id' => 1337],\n    'query'      => ['format' => 'json'],\n]);",
            "title": "getHref() generates the page URI"
        },
        {
            "location": "/pages/#isactive-determines-if-page-is-active",
            "text": "This example demonstrates that MVC pages determine whether they are active by\nusing the params found in the route match object.  use Zend\\Navigation\\Page;\n\n/**\n * Dispatched request:\n * - controller: album\n * - action:     index\n */\n$page1 = new Page\\Mvc([\n    'action'     => 'index',\n    'controller' => 'album',\n]);\n\n$page2 = new Page\\Mvc([\n    'action'     => 'edit',\n    'controller' => 'album',\n]);\n\n$page1->isActive(); // returns true\n$page2->isActive(); // returns false\n\n/**\n * Dispatched request:\n * - controller: album\n * - action:     edit\n * - id:         1337\n */\n$page = new Page\\Mvc([\n    'action'     => 'edit',\n    'controller' => 'album',\n    'params'     => ['id' => 1337],\n]);\n\n// returns true, because request has the same controller and action\n$page->isActive();\n\n/**\n * Dispatched request:\n * - controller: album\n * - action:     edit\n */\n$page = new Page\\Mvc([\n    'action'     => 'edit',\n    'controller' => 'album',\n    'params'     => ['id' => null],\n]);\n\n// returns false, because page requires the id param to be set in the request\n$page->isActive(); // returns false",
            "title": "isActive() determines if page is active"
        },
        {
            "location": "/pages/#using-routes",
            "text": "Routes can be used with MVC pages. If a page has a route, this route will be\nused in  getHref()  to generate the URL for the page.",
            "title": "Using routes"
        },
        {
            "location": "/pages/#default-parameters-are-not-necessary",
            "text": "Note that when using the  route  property in a page, you do not need to\nspecify the default params that the route defines (controller, action, etc.).   use Zend\\Navigation\\Page;\nuse Zend\\Router\\Http\\Segment;\nuse Zend\\Router\\Http\\TreeRouteStack;\n\n// the following route is added to the ZF router\n$route = Segment::factory([\n   'route'       => '/a/:id',\n   'constraints' => [\n      'id' => '[0-9]+',\n   ],\n   [\n      'controller' => 'Album\\Controller\\Album',\n      'action'     => 'show',\n   ]\n]);\n$router = new TreeRouteStack();\n$router->addRoute('albumShow', $route);\n\n// a page is created with a 'route' option\n$page = new Page\\Mvc([\n    'label'      => 'Show album',\n    'route'      => 'albumShow',\n    'params'     => ['id' => 42]\n]);\n\n// returns: /a/42\n$page->getHref();",
            "title": "Default parameters are not necessary"
        },
        {
            "location": "/pages/#uri-pages",
            "text": "Pages of type  Zend\\Navigation\\Page\\Uri  can be used to link to pages on other\ndomains or sites, or to implement custom logic for the page. In addition to the\ncommon page options, a URI page takes only one additional option, a  uri . The uri  will be returned when calling  $page->getHref() , and may be a  string  or null .",
            "title": "URI Pages"
        },
        {
            "location": "/pages/#no-auto-determination-of-active-status",
            "text": "Zend\\Navigation\\Page\\Uri  will not try to determine whether it should be\nactive when calling  $page->isActive() ; it merely returns what currently is\nset. In order to make a URI page active, you must manually call $page->setActive()  or specify the  active  as a page option during\ninstantiation.",
            "title": "No auto-determination of active status"
        },
        {
            "location": "/pages/#uri-page-options",
            "text": "Key  Type  Default  Description      uri  string  NULL  URI to page. This can be any string or  NULL .",
            "title": "URI page options"
        },
        {
            "location": "/pages/#creating-custom-page-types",
            "text": "When extending  Zend\\Navigation\\Page\\AbstractPage , there is usually no need to\noverride the constructor or the  setOptions()  method. The page constructor\ntakes a single parameter, an  array  or a  Traversable  object, which is then\npassed to  setOptions() . That method will in turn call the appropriate  set*() \nmethods based on the options provided, which in turn maps the option to native\nor custom properties. If the option  internal_id  is given, the method will\nfirst look for a method named  setInternalId() , and pass the option to this\nmethod if it exists. If the method does not exist, the option will be set as a\ncustom property of the page, and be accessible via  $internalId =\n$page->internal_id;  or  $internalId = $page->get('internal_id'); .",
            "title": "Creating custom page types"
        },
        {
            "location": "/pages/#basic-custom-page-example",
            "text": "The only thing a custom page class needs to implement is the  getHref()  method.  namespace My;\n\nuse Zend\\Navigation\\Page\\AbstractPage;\n\nclass Page extends AbstractPage\n{\n    public function getHref()\n    {\n        return 'something-completely-different';\n    }\n}",
            "title": "Basic custom page example"
        },
        {
            "location": "/pages/#a-custom-page-with-properties",
            "text": "When adding properties to an extended page, there is no need to override/modify setOptions() .  namespace My\\Navigation;\n\nuse Zend\\Navigation\\Page\\AbstractPage;\n\nclass Page extends AbstractPage\n{\n    protected $foo;\n    protected $fooBar;\n\n    public function setFoo($foo)\n    {\n        $this->foo = $foo;\n    }\n\n    public function getFoo()\n    {\n        return $this->foo;\n    }\n\n    public function setFooBar($fooBar)\n    {\n        $this->fooBar = $fooBar;\n    }\n\n    public function getFooBar()\n    {\n        return $this->fooBar;\n    }\n\n    public function getHref()\n    {\n        return sprintf('%s/%s', $this->foo, $this->fooBar);\n    }\n}\n\n// Instantiation:\n$page = new Page([\n    'label'   => 'Property names are mapped to setters',\n    'foo'     => 'bar',\n    'foo_bar' => 'baz',\n]);",
            "title": "A custom page with properties"
        },
        {
            "location": "/pages/#creating-pages-using-the-page-factory",
            "text": "All pages (also custom classes), can be created using the page factory, Zend\\Navigation\\Page\\AbstractPage::factory() . The factory accepts either an\narray or  Traversable  set of options.  Each key in the options corresponds to a\npage option, as seen earlier.  If the option  uri  is given and no MVC options\nare provided (e.g.,  action ,  controller ,  route ), a URI page will be\ncreated. If any of the MVC options are given, an MVC page will be created.  If  type  is given, the factory will assume the value to be the name of the\nclass that should be created. If the value is  mvc  or  uri , an MVC or URI page\nwill be created, respectively.",
            "title": "Creating pages using the page factory"
        },
        {
            "location": "/pages/#creating-an-mvc-page-using-the-page-factory",
            "text": "use Zend\\Navigation\\Page\\AbstractPage;\n\n// MVC page, as \"action\" is defined\n$page = AbstractPage::factory([\n    'label'  => 'My MVC page',\n    'action' => 'index',\n]);\n\n// MVC page, as \"action\" and \"controller\" are defined\n$page = AbstractPage::factory([\n    'label'      => 'Search blog',\n    'action'     => 'index',\n    'controller' => 'search',\n]);\n\n// MVC page, as \"route\" is defined\n$page = AbstractPage::factory([\n    'label' => 'Home',\n    'route' => 'home',\n]);\n\n// MVC page, as \"type\" is \"mvc\"\n$page = AbstractPage::factory([\n    'type'   => 'mvc',\n    'label'  => 'My MVC page',\n]);",
            "title": "Creating an MVC page using the page factory"
        },
        {
            "location": "/pages/#creating-a-uri-page-using-the-page-factory",
            "text": "use Zend\\Navigation\\Page\\AbstractPage;\n\n// URI page, as \"uri\" is present, with now MVC options\n$page = AbstractPage::factory([\n    'label' => 'My URI page',\n    'uri'   => 'http://www.example.com/',\n]);\n\n// URI page, as \"uri\" is present, with now MVC options\n$page = AbstractPage::factory([\n    'label'  => 'Search',\n    'uri'    => 'http://www.example.com/search',\n    'active' => true,\n]);\n\n// URI page, as \"uri\" is present, with now MVC options\n$page = AbstractPage::factory([\n    'label' => 'My URI page',\n    'uri'   => '#',\n]);\n\n// URI page, as \"type\" is \"uri\"\n$page = AbstractPage::factory([\n    'type'  => 'uri',\n    'label' => 'My URI page',\n]);",
            "title": "Creating a URI page using the page factory"
        },
        {
            "location": "/pages/#creating-a-custom-page-type-using-the-page-factory",
            "text": "To create a custom page type using the factory, use the option  type  to specify\na class name to instantiate.  namespace My\\Navigation;\n\nuse Zend\\Navigation\\Page\\AbstractPage;\n\nclass Page extends AbstractPage\n{\n    protected $fooBar = 'ok';\n\n    public function setFooBar($fooBar)\n    {\n        $this->fooBar = $fooBar;\n    }\n}\n\n// Creates Page instance, as \"type\" refers to its class.\n$page = AbstractPage::factory([\n    'type'    => Page::class,\n    'label'   => 'My custom page',\n    'foo_bar' => 'foo bar',\n]);",
            "title": "Creating a custom page type using the page factory"
        },
        {
            "location": "/containers/",
            "text": "Containers\n\n\nContainers have methods for adding, retrieving, deleting, and iterating pages.\nContainers implement the \nSPL\n interfaces\n\nRecursiveIterator\n and \nCountable\n, meaning that a container can be iterated\nusing the SPL \nRecursiveIteratorIterator\n class.\n\n\nCreating containers\n\n\nZend\\Navigation\\AbstractContainer\n can not be instantiated directly. Use\n\nZend\\Navigation\\Navigation\n if you want to instantiate a container.\n\n\nZend\\Navigation\\Navigation\n can be constructed entirely empty, or take an array\nor a \nTraversable\n object with pages to put in the container. Each page provided\nvia options will eventually be passed to the \naddPage()\n method of the container\nclass, which means that each element in the options can be also be an array,\nTraversable object, or a \nZend\\Navigation\\Page\\AbstractPage\n instance.\n\n\nCreating a container using an array\n\n\nuse Zend\\Navigation\\Navigation;\n\n/*\n * Create a container from an array\n *\n * Each element in the array will be passed to\n * Zend\\Navigation\\Page\\AbstractPage::factory() when constructing.\n */\n$container = new Navigation([\n    [\n        'label' => 'Page 1',\n        'id' => 'home-link',\n        'uri' => '/',\n    ],\n    [\n        'label' => 'Zend',\n        'uri' => 'http://www.zend-project.com/',\n        'order' => 100,\n    ],\n    [\n        'label' => 'Page 2',\n        'controller' => 'page2',\n        'pages' => [\n            [\n                'label' => 'Page 2.1',\n                'action' => 'page2_1',\n                'controller' => 'page2',\n                'class' => 'special-one',\n                'title' => 'This element has a special class',\n                'active' => true,\n            ],\n            [\n                'label' => 'Page 2.2',\n                'action' => 'page2_2',\n                'controller' => 'page2',\n                'class' => 'special-two',\n                'title' => 'This element has a special class too',\n            ],\n        ],\n    ],\n    [\n        'label' => 'Page 2 with params',\n        'action' => 'index',\n        'controller' => 'page2',\n        // specify a param or two,\n        'params' => [\n            'format' => 'json',\n            'foo' => 'bar',\n        ]\n    ],\n    [\n        'label' => 'Page 2 with params and a route',\n        'action' => 'index',\n        'controller' => 'page2',\n\n        // specify a route name and a param for the route\n        'route' => 'nav-route-example',\n        'params' => [\n            'format' => 'json',\n        ],\n    ],\n    [\n        'label' => 'Page 3',\n        'action' => 'index',\n        'controller' => 'index',\n        'module' => 'mymodule',\n        'reset_params' => false,\n    ],\n    [\n        'label' => 'Page 4',\n        'uri' => '#',\n        'pages' => [\n            [\n                'label' => 'Page 4.1',\n                'uri' => '/page4',\n                'title' => 'Page 4 using uri',\n                'pages' => [\n                    [\n                        'label' => 'Page 4.1.1',\n                        'title' => 'Page 4 using mvc params',\n                        'action' => 'index',\n                        'controller' => 'page4',\n                        // let's say this page is active\n                        'active' => '1',\n                    ]\n                ],\n            ],\n        ],\n    ],\n    [\n        'label' => 'Page 0?',\n        'uri' => '/setting/the/order/option',\n\n        // setting order to -1 should make it appear first\n        'order' => -1,\n    ],\n    [\n        'label' => 'Page 5',\n        'uri' => '/',\n\n        // this page should not be visible\n        'visible' => false,\n        'pages' => [\n            [\n                'label' => 'Page 5.1',\n                'uri' => '#',\n                'pages' => [\n                    [\n                        'label' => 'Page 5.1.1',\n                        'uri' => '#',\n                        'pages' => [\n                            [\n                                'label' => 'Page 5.1.2',\n                                'uri' => '#',\n\n                                // let's say this page is active\n                                'active' => true,\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n    [\n        'label' => 'ACL page 1 (guest)',\n        'uri' => '#acl-guest',\n        'resource' => 'nav-guest',\n        'pages' => [\n            [\n                'label' => 'ACL page 1.1 (foo)',\n                'uri' => '#acl-foo',\n                'resource' => 'nav-foo',\n            ],\n            [\n                'label' => 'ACL page 1.2 (bar)',\n                'uri' => '#acl-bar',\n                'resource' => 'nav-bar',\n            ],\n            [\n                'label' => 'ACL page 1.3 (baz)',\n                'uri' => '#acl-baz',\n                'resource' => 'nav-baz',\n            ],\n            [\n                'label' => 'ACL page 1.4 (bat)',\n                'uri' => '#acl-bat',\n                'resource' => 'nav-bat',\n            ],\n        ],\n    ],\n    [\n        'label' => 'ACL page 2 (member)',\n        'uri' => '#acl-member',\n        'resource' => 'nav-member',\n    ],\n    [\n        'label' => 'ACL page 3 (admin',\n        'uri' => '#acl-admin',\n        'resource' => 'nav-admin',\n        'pages' => [\n            [\n                'label' => 'ACL page 3.1 (nothing)',\n                'uri' => '#acl-nada',\n            ],\n        ],\n    ],\n    [\n        'label' => 'Zend Framework',\n        'route' => 'zf-route',\n    ],\n]);\n\n\n\nAdding pages\n\n\nAdding pages to a container can be done with the methods \naddPage()\n,\n\naddPages()\n, or \nsetPages()\n.  See examples below for explanation.\n\n\nuse Zend\\Config\\Config;\nuse Zend\\Navigation\\Navigation;\nuse Zend\\Navigation\\Page\\AbstractPage;\n\n// create container\n$container = new Navigation();\n\n// add page by giving a page instance\n$container->addPage(AbstractPage::factory([\n    'uri' => 'http://www.example.com/',\n]]);\n\n// add page by giving an array\n$container->addPage([\n    'uri' => 'http://www.example.com/',\n]);\n\n// add page by giving a Traversable object; in this case, a zend-config\n// instance.\n$container->addPage(Config([\n    'uri' => 'http://www.example.com/',\n]));\n\n$pages = [\n    [\n        'label'  => 'Save',\n        'action' => 'save',\n    ],\n    [\n        'label' =>  'Delete',\n        'action' => 'delete',\n    ],\n];\n\n// add two pages\n$container->addPages($pages);\n\n// remove existing pages and add the given pages\n$container->setPages($pages);\n\n\n\nRemoving pages\n\n\nRemoving pages can be done with \nremovePage()\n or \nremovePages()\n.\n\nremovePage()\n accepts an instance of a page or an integer. Integer arguments\ncorrespond to the \norder\n a page has. \nremovePages()\n will remove all pages in\nthe container.\n\n\nuse Zend\\Navigation\\Navigation;\n\n$container = new Navigation([\n    [\n        'label'  => 'Page 1',\n        'action' => 'page1',\n    ],\n    [\n        'label'  => 'Page 2',\n        'action' => 'page2',\n        'order'  => 200,\n    ],\n    [\n        'label'  => 'Page 3',\n        'action' => 'page3',\n    ],\n]);\n\n// remove page by implicit page order\n$container->removePage(0);      // removes Page 1\n\n// remove page by instance\n$page3 = $container->findOneByAction('page3');\n$container->removePage($page3); // removes Page 3\n\n// remove page by explicit page order\n$container->removePage(200);    // removes Page 2\n\n// remove all pages\n$container->removePages();      // removes all pages\n\n\n\nRemove a page recursively\n\n\nRemoving a page recursively can be done with the second parameter of\nthe \nremovePage()\n method, which expects a \nboolean\n value.\n\n\nuse Zend\\Navigation\\Navigation;\n\n$container = new Navigation(\n    [\n        [\n            'label' => 'Page 1',\n            'route' => 'page1',\n            'pages' => [\n                [\n                    'label' => 'Page 1.1',\n                    'route' => 'page1/page1-1',\n                    'pages' => [\n                        [\n                            'label' => 'Page 1.1.1',\n                            'route' => 'page1/page1-1/page1-1-1',\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ]\n);\n\n// Removes Page 1.1.1\n$container->removePage(\n    $container->findOneBy('route', 'page1/page1-1/page1-1-1'),\n    true\n);\n\n\n\nFinding pages\n\n\nContainers have three finder methods for retrieving pages. Each recursively\nsearches the container testing for properties with values that match the one\nprovided.\n\n\n\n\nfindOneBy($property, $value) : AbstractPage|null\n: Returns the first page\n  found matching the criteria, or \nnull\n if none was found.\n\n\nfindAllBy($property, $value) : AbstractPage[]\n: Returns an array of all\n  page instances matching the criteria.\n\n\nfindBy($property, $value, $all = false) AbstractPage|AbstractPage[]|null\n:\n  calls on one of the previous methods based on the value of \n$all\n.\n\n\n\n\nThe finder methods can also be used magically by appending the property name to\n\nfindBy\n, \nfindOneBy\n, or \nfindAllBy\n. As an example, \nfindOneByLabel('Home')\n\nwill return the first matching page with label 'Home'.\n\n\nOther combinations include \nfindByLabel(...)\n, \nfindOneByTitle(...)\n,\n\nfindAllByController(...)\n, etc. Finder methods also work on custom properties,\nsuch as \nfindByFoo('bar')\n.\n\n\nuse Zend\\Navigation\\Navigation;\n\n$container = new Navigation([\n    [\n        'label' => 'Page 1',\n        'uri'   => 'page-1',\n        'foo'   => 'bar',\n        'pages' => [\n            [\n                'label' => 'Page 1.1',\n                'uri'   => 'page-1.1',\n                'foo'   => 'bar',\n            ],\n            [\n                'label' => 'Page 1.2',\n                'uri'   => 'page-1.2',\n                'class' => 'my-class',\n            ],\n            [\n                'type'   => 'uri',\n                'label'  => 'Page 1.3',\n                'uri'    => 'page-1.3',\n                'action' => 'about',\n            ],\n        ],\n    ],\n    [\n        'label'      => 'Page 2',\n        'id'         => 'page_2_and_3',\n        'class'      => 'my-class',\n        'module'     => 'page2',\n        'controller' => 'index',\n        'action'     => 'page1',\n    ],\n    [\n        'label'      => 'Page 3',\n        'id'         => 'page_2_and_3',\n        'module'     => 'page3',\n        'controller' => 'index',\n    ],\n]);\n\n// The 'id' is not required to be unique, but be aware that\n// having two pages with the same id will render the same id attribute\n// in menus and breadcrumbs.\n\n// Returns \"Page 2\":\n$found = $container->findBy('id', 'page_2_and_3');\n\n// Returns \"Page 2\":\n$found = $container->findOneBy('id', 'page_2_and_3');\n\n// Returns \"Page 2\" AND \"Page 3\":\n$found = $container->findBy('id', 'page_2_and_3', true);\n\n// Returns \"Page 2\":\n$found = $container->findById('page_2_and_3');\n\n// Returns \"Page 2\":\n$found = $container->findOneById('page_2_and_3');\n\n// Returns \"Page 2\" AND \"Page 3\":\n$found = $container->findAllById('page_2_and_3');\n\n// Find all pages matching the CSS class \"my-class\":\n// Returns \"Page 1.2\" and \"Page 2\":\n$found = $container->findAllBy('class', 'my-class');\n$found = $container->findAllByClass('my-class');\n\n// Find first page matching CSS class \"my-class\":\n// Returns \"Page 1.2\":\n$found = $container->findOneByClass('my-class');\n\n// Find all pages matching the CSS class \"non-existent\":\n// Returns an empty array.\n$found = $container->findAllByClass('non-existent');\n\n// Find first page matching the CSS class \"non-existent\":\n// Returns null.\n$found = $container->findOneByClass('non-existent');\n\n// Find all pages with custom property 'foo' = 'bar':\n// Returns \"Page 1\" and \"Page 1.1\":\n$found = $container->findAllBy('foo', 'bar');\n\n// To achieve the same magically, 'foo' must be in lowercase.\n// This is because 'foo' is a custom property, and thus the\n// property name is not normalized to 'Foo':\n$found = $container->findAllByfoo('bar');\n\n// Find all with controller = 'index':\n// Returns \"Page 2\" and \"Page 3\":\n$found = $container->findAllByController('index');\n\n\n\nIterating containers\n\n\nZend\\Navigation\\AbstractContainer\n implements \nRecursiveIterator\n.  iterate a\ncontainer recursively, use the \nRecursiveIteratorIterator\n class.\n\n\nuse RecursiveIteratorIterator;\nuse Zend\\Navigation\\Navigation;\n\n/*\n * Create a container from an array\n */\n$container = new Navigation([\n    [\n        'label' => 'Page 1',\n        'uri'   => '#',\n    ],\n    [\n        'label' => 'Page 2',\n        'uri'   => '#',\n        'pages' => [\n            [\n                'label' => 'Page 2.1',\n                'uri'   => '#',\n            ],\n            [\n                'label' => 'Page 2.2',\n                'uri'   => '#',\n            ],\n        ],\n    ],\n    [\n        'label' => 'Page 3',\n        'uri'   => '#',\n    ],\n]);\n\n// Iterate flat using regular foreach:\n// Output: Page 1, Page 2, Page 3\nforeach ($container as $page) {\n    echo $page->label;\n}\n\n// Iterate recursively using RecursiveIteratorIterator\n$it = new RecursiveIteratorIterator(\n    $container,\n    RecursiveIteratorIterator::SELF_FIRST\n);\n\n// Output: Page 1, Page 2, Page 2.1, Page 2.2, Page 3\nforeach ($it as $page) {\n    echo $page->label;\n}\n\n\n\nOther operations\n\n\nhasPage\n\n\nhasPage(AbstractPage $page) : bool\n\n\n\nCheck if the container has the given page.\n\n\nhasPages\n\n\nhasPages() : bool\n\n\n\nChecks if there are any pages in the container, and is equivalent to\n\ncount($container) > 0\n.\n\n\ntoArray\n\n\ntoArray() : array\n\n\n\nConverts the container and the pages in it to a (nested) array. This can be useful\nfor serializing and debugging.\n\n\nuse Zend\\Navigation\\Navigation;\n\n$container = new Navigation([\n    [\n        'label' => 'Page 1',\n        'uri'   => '#',\n    ],\n    [\n        'label' => 'Page 2',\n        'uri'   => '#',\n        'pages' => [\n            [\n                'label' => 'Page 2.1',\n                'uri'   => '#',\n            ],\n            [\n                'label' => 'Page 2.2',\n               'uri'   => '#',\n            ],\n        ],\n    ],\n]);\n\nvar_dump($container->toArray());\n\n/* Output:\narray(2) {\n  [0]=> array(15) {\n    [\"label\"]=> string(6) \"Page 1\"\n    [\"id\"]=> NULL\n    [\"class\"]=> NULL\n    [\"title\"]=> NULL\n    [\"target\"]=> NULL\n    [\"rel\"]=> array(0) {\n    }\n    [\"rev\"]=> array(0) {\n    }\n    [\"order\"]=> NULL\n    [\"resource\"]=> NULL\n    [\"privilege\"]=> NULL\n    [\"active\"]=> bool(false)\n    [\"visible\"]=> bool(true)\n    [\"type\"]=> string(23) \"Zend\\Navigation\\Page\\Uri\"\n    [\"pages\"]=> array(0) {\n    }\n    [\"uri\"]=> string(1) \"#\"\n  }\n  [1]=> array(15) {\n    [\"label\"]=> string(6) \"Page 2\"\n    [\"id\"]=> NULL\n    [\"class\"]=> NULL\n    [\"title\"]=> NULL\n    [\"target\"]=> NULL\n    [\"rel\"]=> array(0) {\n    }\n    [\"rev\"]=> array(0) {\n    }\n    [\"order\"]=> NULL\n    [\"resource\"]=> NULL\n    [\"privilege\"]=> NULL\n    [\"active\"]=> bool(false)\n    [\"visible\"]=> bool(true)\n    [\"type\"]=> string(23) \"Zend\\Navigation\\Page\\Uri\"\n    [\"pages\"]=> array(2) {\n      [0]=> array(15) {\n        [\"label\"]=> string(8) \"Page 2.1\"\n        [\"id\"]=> NULL\n        [\"class\"]=> NULL\n        [\"title\"]=> NULL\n        [\"target\"]=> NULL\n        [\"rel\"]=> array(0) {\n        }\n        [\"rev\"]=> array(0) {\n        }\n        [\"order\"]=> NULL\n        [\"resource\"]=> NULL\n        [\"privilege\"]=> NULL\n        [\"active\"]=> bool(false)\n        [\"visible\"]=> bool(true)\n        [\"type\"]=> string(23) \"Zend\\Navigation\\Page\\Uri\"\n        [\"pages\"]=> array(0) {\n        }\n        [\"uri\"]=> string(1) \"#\"\n      }\n      [1]=>\n      array(15) {\n        [\"label\"]=> string(8) \"Page 2.2\"\n        [\"id\"]=> NULL\n        [\"class\"]=> NULL\n        [\"title\"]=> NULL\n        [\"target\"]=> NULL\n        [\"rel\"]=> array(0) {\n        }\n        [\"rev\"]=> array(0) {\n        }\n        [\"order\"]=> NULL\n        [\"resource\"]=> NULL\n        [\"privilege\"]=> NULL\n        [\"active\"]=> bool(false)\n        [\"visible\"]=> bool(true)\n        [\"type\"]=> string(23) \"Zend\\Navigation\\Page\\Uri\"\n        [\"pages\"]=> array(0) {\n        }\n        [\"uri\"]=> string(1) \"#\"\n      }\n    }\n    [\"uri\"]=> string(1) \"#\"\n  }\n}\n*/",
            "title": "Containers"
        },
        {
            "location": "/containers/#containers",
            "text": "Containers have methods for adding, retrieving, deleting, and iterating pages.\nContainers implement the  SPL  interfaces RecursiveIterator  and  Countable , meaning that a container can be iterated\nusing the SPL  RecursiveIteratorIterator  class.",
            "title": "Containers"
        },
        {
            "location": "/containers/#creating-containers",
            "text": "Zend\\Navigation\\AbstractContainer  can not be instantiated directly. Use Zend\\Navigation\\Navigation  if you want to instantiate a container.  Zend\\Navigation\\Navigation  can be constructed entirely empty, or take an array\nor a  Traversable  object with pages to put in the container. Each page provided\nvia options will eventually be passed to the  addPage()  method of the container\nclass, which means that each element in the options can be also be an array,\nTraversable object, or a  Zend\\Navigation\\Page\\AbstractPage  instance.",
            "title": "Creating containers"
        },
        {
            "location": "/containers/#creating-a-container-using-an-array",
            "text": "use Zend\\Navigation\\Navigation;\n\n/*\n * Create a container from an array\n *\n * Each element in the array will be passed to\n * Zend\\Navigation\\Page\\AbstractPage::factory() when constructing.\n */\n$container = new Navigation([\n    [\n        'label' => 'Page 1',\n        'id' => 'home-link',\n        'uri' => '/',\n    ],\n    [\n        'label' => 'Zend',\n        'uri' => 'http://www.zend-project.com/',\n        'order' => 100,\n    ],\n    [\n        'label' => 'Page 2',\n        'controller' => 'page2',\n        'pages' => [\n            [\n                'label' => 'Page 2.1',\n                'action' => 'page2_1',\n                'controller' => 'page2',\n                'class' => 'special-one',\n                'title' => 'This element has a special class',\n                'active' => true,\n            ],\n            [\n                'label' => 'Page 2.2',\n                'action' => 'page2_2',\n                'controller' => 'page2',\n                'class' => 'special-two',\n                'title' => 'This element has a special class too',\n            ],\n        ],\n    ],\n    [\n        'label' => 'Page 2 with params',\n        'action' => 'index',\n        'controller' => 'page2',\n        // specify a param or two,\n        'params' => [\n            'format' => 'json',\n            'foo' => 'bar',\n        ]\n    ],\n    [\n        'label' => 'Page 2 with params and a route',\n        'action' => 'index',\n        'controller' => 'page2',\n\n        // specify a route name and a param for the route\n        'route' => 'nav-route-example',\n        'params' => [\n            'format' => 'json',\n        ],\n    ],\n    [\n        'label' => 'Page 3',\n        'action' => 'index',\n        'controller' => 'index',\n        'module' => 'mymodule',\n        'reset_params' => false,\n    ],\n    [\n        'label' => 'Page 4',\n        'uri' => '#',\n        'pages' => [\n            [\n                'label' => 'Page 4.1',\n                'uri' => '/page4',\n                'title' => 'Page 4 using uri',\n                'pages' => [\n                    [\n                        'label' => 'Page 4.1.1',\n                        'title' => 'Page 4 using mvc params',\n                        'action' => 'index',\n                        'controller' => 'page4',\n                        // let's say this page is active\n                        'active' => '1',\n                    ]\n                ],\n            ],\n        ],\n    ],\n    [\n        'label' => 'Page 0?',\n        'uri' => '/setting/the/order/option',\n\n        // setting order to -1 should make it appear first\n        'order' => -1,\n    ],\n    [\n        'label' => 'Page 5',\n        'uri' => '/',\n\n        // this page should not be visible\n        'visible' => false,\n        'pages' => [\n            [\n                'label' => 'Page 5.1',\n                'uri' => '#',\n                'pages' => [\n                    [\n                        'label' => 'Page 5.1.1',\n                        'uri' => '#',\n                        'pages' => [\n                            [\n                                'label' => 'Page 5.1.2',\n                                'uri' => '#',\n\n                                // let's say this page is active\n                                'active' => true,\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n    [\n        'label' => 'ACL page 1 (guest)',\n        'uri' => '#acl-guest',\n        'resource' => 'nav-guest',\n        'pages' => [\n            [\n                'label' => 'ACL page 1.1 (foo)',\n                'uri' => '#acl-foo',\n                'resource' => 'nav-foo',\n            ],\n            [\n                'label' => 'ACL page 1.2 (bar)',\n                'uri' => '#acl-bar',\n                'resource' => 'nav-bar',\n            ],\n            [\n                'label' => 'ACL page 1.3 (baz)',\n                'uri' => '#acl-baz',\n                'resource' => 'nav-baz',\n            ],\n            [\n                'label' => 'ACL page 1.4 (bat)',\n                'uri' => '#acl-bat',\n                'resource' => 'nav-bat',\n            ],\n        ],\n    ],\n    [\n        'label' => 'ACL page 2 (member)',\n        'uri' => '#acl-member',\n        'resource' => 'nav-member',\n    ],\n    [\n        'label' => 'ACL page 3 (admin',\n        'uri' => '#acl-admin',\n        'resource' => 'nav-admin',\n        'pages' => [\n            [\n                'label' => 'ACL page 3.1 (nothing)',\n                'uri' => '#acl-nada',\n            ],\n        ],\n    ],\n    [\n        'label' => 'Zend Framework',\n        'route' => 'zf-route',\n    ],\n]);",
            "title": "Creating a container using an array"
        },
        {
            "location": "/containers/#adding-pages",
            "text": "Adding pages to a container can be done with the methods  addPage() , addPages() , or  setPages() .  See examples below for explanation.  use Zend\\Config\\Config;\nuse Zend\\Navigation\\Navigation;\nuse Zend\\Navigation\\Page\\AbstractPage;\n\n// create container\n$container = new Navigation();\n\n// add page by giving a page instance\n$container->addPage(AbstractPage::factory([\n    'uri' => 'http://www.example.com/',\n]]);\n\n// add page by giving an array\n$container->addPage([\n    'uri' => 'http://www.example.com/',\n]);\n\n// add page by giving a Traversable object; in this case, a zend-config\n// instance.\n$container->addPage(Config([\n    'uri' => 'http://www.example.com/',\n]));\n\n$pages = [\n    [\n        'label'  => 'Save',\n        'action' => 'save',\n    ],\n    [\n        'label' =>  'Delete',\n        'action' => 'delete',\n    ],\n];\n\n// add two pages\n$container->addPages($pages);\n\n// remove existing pages and add the given pages\n$container->setPages($pages);",
            "title": "Adding pages"
        },
        {
            "location": "/containers/#removing-pages",
            "text": "Removing pages can be done with  removePage()  or  removePages() . removePage()  accepts an instance of a page or an integer. Integer arguments\ncorrespond to the  order  a page has.  removePages()  will remove all pages in\nthe container.  use Zend\\Navigation\\Navigation;\n\n$container = new Navigation([\n    [\n        'label'  => 'Page 1',\n        'action' => 'page1',\n    ],\n    [\n        'label'  => 'Page 2',\n        'action' => 'page2',\n        'order'  => 200,\n    ],\n    [\n        'label'  => 'Page 3',\n        'action' => 'page3',\n    ],\n]);\n\n// remove page by implicit page order\n$container->removePage(0);      // removes Page 1\n\n// remove page by instance\n$page3 = $container->findOneByAction('page3');\n$container->removePage($page3); // removes Page 3\n\n// remove page by explicit page order\n$container->removePage(200);    // removes Page 2\n\n// remove all pages\n$container->removePages();      // removes all pages",
            "title": "Removing pages"
        },
        {
            "location": "/containers/#remove-a-page-recursively",
            "text": "Removing a page recursively can be done with the second parameter of\nthe  removePage()  method, which expects a  boolean  value.  use Zend\\Navigation\\Navigation;\n\n$container = new Navigation(\n    [\n        [\n            'label' => 'Page 1',\n            'route' => 'page1',\n            'pages' => [\n                [\n                    'label' => 'Page 1.1',\n                    'route' => 'page1/page1-1',\n                    'pages' => [\n                        [\n                            'label' => 'Page 1.1.1',\n                            'route' => 'page1/page1-1/page1-1-1',\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ]\n);\n\n// Removes Page 1.1.1\n$container->removePage(\n    $container->findOneBy('route', 'page1/page1-1/page1-1-1'),\n    true\n);",
            "title": "Remove a page recursively"
        },
        {
            "location": "/containers/#finding-pages",
            "text": "Containers have three finder methods for retrieving pages. Each recursively\nsearches the container testing for properties with values that match the one\nprovided.   findOneBy($property, $value) : AbstractPage|null : Returns the first page\n  found matching the criteria, or  null  if none was found.  findAllBy($property, $value) : AbstractPage[] : Returns an array of all\n  page instances matching the criteria.  findBy($property, $value, $all = false) AbstractPage|AbstractPage[]|null :\n  calls on one of the previous methods based on the value of  $all .   The finder methods can also be used magically by appending the property name to findBy ,  findOneBy , or  findAllBy . As an example,  findOneByLabel('Home') \nwill return the first matching page with label 'Home'.  Other combinations include  findByLabel(...) ,  findOneByTitle(...) , findAllByController(...) , etc. Finder methods also work on custom properties,\nsuch as  findByFoo('bar') .  use Zend\\Navigation\\Navigation;\n\n$container = new Navigation([\n    [\n        'label' => 'Page 1',\n        'uri'   => 'page-1',\n        'foo'   => 'bar',\n        'pages' => [\n            [\n                'label' => 'Page 1.1',\n                'uri'   => 'page-1.1',\n                'foo'   => 'bar',\n            ],\n            [\n                'label' => 'Page 1.2',\n                'uri'   => 'page-1.2',\n                'class' => 'my-class',\n            ],\n            [\n                'type'   => 'uri',\n                'label'  => 'Page 1.3',\n                'uri'    => 'page-1.3',\n                'action' => 'about',\n            ],\n        ],\n    ],\n    [\n        'label'      => 'Page 2',\n        'id'         => 'page_2_and_3',\n        'class'      => 'my-class',\n        'module'     => 'page2',\n        'controller' => 'index',\n        'action'     => 'page1',\n    ],\n    [\n        'label'      => 'Page 3',\n        'id'         => 'page_2_and_3',\n        'module'     => 'page3',\n        'controller' => 'index',\n    ],\n]);\n\n// The 'id' is not required to be unique, but be aware that\n// having two pages with the same id will render the same id attribute\n// in menus and breadcrumbs.\n\n// Returns \"Page 2\":\n$found = $container->findBy('id', 'page_2_and_3');\n\n// Returns \"Page 2\":\n$found = $container->findOneBy('id', 'page_2_and_3');\n\n// Returns \"Page 2\" AND \"Page 3\":\n$found = $container->findBy('id', 'page_2_and_3', true);\n\n// Returns \"Page 2\":\n$found = $container->findById('page_2_and_3');\n\n// Returns \"Page 2\":\n$found = $container->findOneById('page_2_and_3');\n\n// Returns \"Page 2\" AND \"Page 3\":\n$found = $container->findAllById('page_2_and_3');\n\n// Find all pages matching the CSS class \"my-class\":\n// Returns \"Page 1.2\" and \"Page 2\":\n$found = $container->findAllBy('class', 'my-class');\n$found = $container->findAllByClass('my-class');\n\n// Find first page matching CSS class \"my-class\":\n// Returns \"Page 1.2\":\n$found = $container->findOneByClass('my-class');\n\n// Find all pages matching the CSS class \"non-existent\":\n// Returns an empty array.\n$found = $container->findAllByClass('non-existent');\n\n// Find first page matching the CSS class \"non-existent\":\n// Returns null.\n$found = $container->findOneByClass('non-existent');\n\n// Find all pages with custom property 'foo' = 'bar':\n// Returns \"Page 1\" and \"Page 1.1\":\n$found = $container->findAllBy('foo', 'bar');\n\n// To achieve the same magically, 'foo' must be in lowercase.\n// This is because 'foo' is a custom property, and thus the\n// property name is not normalized to 'Foo':\n$found = $container->findAllByfoo('bar');\n\n// Find all with controller = 'index':\n// Returns \"Page 2\" and \"Page 3\":\n$found = $container->findAllByController('index');",
            "title": "Finding pages"
        },
        {
            "location": "/containers/#iterating-containers",
            "text": "Zend\\Navigation\\AbstractContainer  implements  RecursiveIterator .  iterate a\ncontainer recursively, use the  RecursiveIteratorIterator  class.  use RecursiveIteratorIterator;\nuse Zend\\Navigation\\Navigation;\n\n/*\n * Create a container from an array\n */\n$container = new Navigation([\n    [\n        'label' => 'Page 1',\n        'uri'   => '#',\n    ],\n    [\n        'label' => 'Page 2',\n        'uri'   => '#',\n        'pages' => [\n            [\n                'label' => 'Page 2.1',\n                'uri'   => '#',\n            ],\n            [\n                'label' => 'Page 2.2',\n                'uri'   => '#',\n            ],\n        ],\n    ],\n    [\n        'label' => 'Page 3',\n        'uri'   => '#',\n    ],\n]);\n\n// Iterate flat using regular foreach:\n// Output: Page 1, Page 2, Page 3\nforeach ($container as $page) {\n    echo $page->label;\n}\n\n// Iterate recursively using RecursiveIteratorIterator\n$it = new RecursiveIteratorIterator(\n    $container,\n    RecursiveIteratorIterator::SELF_FIRST\n);\n\n// Output: Page 1, Page 2, Page 2.1, Page 2.2, Page 3\nforeach ($it as $page) {\n    echo $page->label;\n}",
            "title": "Iterating containers"
        },
        {
            "location": "/containers/#other-operations",
            "text": "",
            "title": "Other operations"
        },
        {
            "location": "/containers/#haspage",
            "text": "hasPage(AbstractPage $page) : bool  Check if the container has the given page.",
            "title": "hasPage"
        },
        {
            "location": "/containers/#haspages",
            "text": "hasPages() : bool  Checks if there are any pages in the container, and is equivalent to count($container) > 0 .",
            "title": "hasPages"
        },
        {
            "location": "/containers/#toarray",
            "text": "toArray() : array  Converts the container and the pages in it to a (nested) array. This can be useful\nfor serializing and debugging.  use Zend\\Navigation\\Navigation;\n\n$container = new Navigation([\n    [\n        'label' => 'Page 1',\n        'uri'   => '#',\n    ],\n    [\n        'label' => 'Page 2',\n        'uri'   => '#',\n        'pages' => [\n            [\n                'label' => 'Page 2.1',\n                'uri'   => '#',\n            ],\n            [\n                'label' => 'Page 2.2',\n               'uri'   => '#',\n            ],\n        ],\n    ],\n]);\n\nvar_dump($container->toArray());\n\n/* Output:\narray(2) {\n  [0]=> array(15) {\n    [\"label\"]=> string(6) \"Page 1\"\n    [\"id\"]=> NULL\n    [\"class\"]=> NULL\n    [\"title\"]=> NULL\n    [\"target\"]=> NULL\n    [\"rel\"]=> array(0) {\n    }\n    [\"rev\"]=> array(0) {\n    }\n    [\"order\"]=> NULL\n    [\"resource\"]=> NULL\n    [\"privilege\"]=> NULL\n    [\"active\"]=> bool(false)\n    [\"visible\"]=> bool(true)\n    [\"type\"]=> string(23) \"Zend\\Navigation\\Page\\Uri\"\n    [\"pages\"]=> array(0) {\n    }\n    [\"uri\"]=> string(1) \"#\"\n  }\n  [1]=> array(15) {\n    [\"label\"]=> string(6) \"Page 2\"\n    [\"id\"]=> NULL\n    [\"class\"]=> NULL\n    [\"title\"]=> NULL\n    [\"target\"]=> NULL\n    [\"rel\"]=> array(0) {\n    }\n    [\"rev\"]=> array(0) {\n    }\n    [\"order\"]=> NULL\n    [\"resource\"]=> NULL\n    [\"privilege\"]=> NULL\n    [\"active\"]=> bool(false)\n    [\"visible\"]=> bool(true)\n    [\"type\"]=> string(23) \"Zend\\Navigation\\Page\\Uri\"\n    [\"pages\"]=> array(2) {\n      [0]=> array(15) {\n        [\"label\"]=> string(8) \"Page 2.1\"\n        [\"id\"]=> NULL\n        [\"class\"]=> NULL\n        [\"title\"]=> NULL\n        [\"target\"]=> NULL\n        [\"rel\"]=> array(0) {\n        }\n        [\"rev\"]=> array(0) {\n        }\n        [\"order\"]=> NULL\n        [\"resource\"]=> NULL\n        [\"privilege\"]=> NULL\n        [\"active\"]=> bool(false)\n        [\"visible\"]=> bool(true)\n        [\"type\"]=> string(23) \"Zend\\Navigation\\Page\\Uri\"\n        [\"pages\"]=> array(0) {\n        }\n        [\"uri\"]=> string(1) \"#\"\n      }\n      [1]=>\n      array(15) {\n        [\"label\"]=> string(8) \"Page 2.2\"\n        [\"id\"]=> NULL\n        [\"class\"]=> NULL\n        [\"title\"]=> NULL\n        [\"target\"]=> NULL\n        [\"rel\"]=> array(0) {\n        }\n        [\"rev\"]=> array(0) {\n        }\n        [\"order\"]=> NULL\n        [\"resource\"]=> NULL\n        [\"privilege\"]=> NULL\n        [\"active\"]=> bool(false)\n        [\"visible\"]=> bool(true)\n        [\"type\"]=> string(23) \"Zend\\Navigation\\Page\\Uri\"\n        [\"pages\"]=> array(0) {\n        }\n        [\"uri\"]=> string(1) \"#\"\n      }\n    }\n    [\"uri\"]=> string(1) \"#\"\n  }\n}\n*/",
            "title": "toArray"
        },
        {
            "location": "/helpers/intro/",
            "text": "View Helpers\n\n\nThe navigation helpers are used for rendering navigational elements from\n\nZend\\Navigation\\Navigation\n instances.\n\n\nThere are 5 built-in helpers:\n\n\n\n\nBreadcrumbs\n, used for rendering the path to the currently\n  active page.\n\n\nLinks\n, used for rendering navigational head links (e.g.\n  \n<link rel=\"next\" href=\"...\" />\n).\n\n\nMenu\n, used for rendering menus.\n\n\nSitemap\n, used for rendering sitemaps conforming to the\n  \nSitemaps XML format\n.\n\n\nNavigation\n, used for proxying calls to other navigational\n  helpers.\n\n\n\n\nAll built-in helpers extend \nZend\\View\\Helper\\Navigation\\AbstractHelper\n, which\nadds integration with\n\nzend-acl\n and\n\nzend-i18n\n. The abstract class\nimplements the interface \nZend\\View\\Helper\\Navigation\\HelperInterface\n, which\ndefines the following methods:\n\n\n\n\n\n\n\n\nMethod signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngetContainer() : null\\|AbstractContainer\n\n\nRetrieve the current navigation container, if any.\n\n\n\n\n\n\nhasContainer() : bool\n\n\nIs any navigation container currently registered?\n\n\n\n\n\n\nsetContainer(AbstractContainer $container) : self\n\n\nSet a navigation container.\n\n\n\n\n\n\ngetTranslator() : null\\|Zend\\I18n\\Translator\\TranslatorInterface\n\n\nRetrieve the current translator instance, if any.\n\n\n\n\n\n\nsetTranslator(Zend\\I18n\\Translator\\TranslatorInterface\n) : self`\n\n\nSet a translator instance to use with labels.\n\n\n\n\n\n\nhasTranslator() : bool\n\n\nIs a translator instance present?\n\n\n\n\n\n\nisTranslatorEnabled() : bool\n\n\nShould translation occur? To be \ntrue\n, both the flag enabling translation must be set, and a translator instance present.\n\n\n\n\n\n\nsetTranslatorEnabled(bool $flag) : self\n\n\nSet the flag indicating whether or not translation should occur.\n\n\n\n\n\n\ngetAcl() : null\\|Zend\\Permissions\\Acl\\AclInterface\n\n\nRetrieve the current ACL instance, if any.\n\n\n\n\n\n\nsetAcl(Zend\\Permissions\\Acl\\AclInterface $acl) : self\n\n\nSet an ACL instance.\n\n\n\n\n\n\nhasAcl() : bool\n\n\nWhether or not an ACL instance is present.\n\n\n\n\n\n\ngetRole() : null\\|string|\\Zend\\Permissions\\Acl\\Role\\RoleInterface\n\n\nRetrieve the current ACL role instance, if any.\n\n\n\n\n\n\nsetRole(string\\|Zend\\Permissions\\Acl\\Role\\RoleInterface $acl) : self\n\n\nSet an ACL role instance.\n\n\n\n\n\n\nhasRole() : bool\n\n\nWhether or not an ACL role instance is present.\n\n\n\n\n\n\ngetUseAcl() : bool\n\n\nWhether or not to use ACLs; both the flag must be enabled and an ACL instance present.\n\n\n\n\n\n\nsetUseAcl(bool $flag) : self\n\n\nSet the flag indicating whether or not to use ACLs.\n\n\n\n\n\n\n__toString()\n\n\nCast the helper to a string value; relies on \nrender()\n.\n\n\n\n\n\n\nrender()\n\n\nRender the helper to a string.\n\n\n\n\n\n\n\n\nIn addition to the method stubs from the interface, the abstract class also\nimplements the following methods:\n\n\n\n\n\n\n\n\nMethod signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngetIndent() : string\n\n\nRetrieve the indentation string to use; default is 4 spaces.\n\n\n\n\n\n\nsetIndent(string\\|int $indent) : self\n\n\nSet the indentation to use. In the case of an integer, this indicates the number of spaces. Indentation can be specified for all but the \nSitemap\n helper.\n\n\n\n\n\n\ngetMinDepth() : int\n\n\nRetrieve the minimum depth a page must have to be included in output\n\n\n\n\n\n\nsetMinDepth(null\\|int $depth) : self\n\n\nSet the minimum depth a page must have to be included in output; \nnull\n means no minimum.\n\n\n\n\n\n\ngetMaxDepth() : int\n\n\nRetrieve the maximum depth a page must have to be included in output\n\n\n\n\n\n\nsetMaxDepth(null\\|int $depth) : self\n\n\nSet the maximum depth a page must have to be included in output; \nnull\n means no maximum.\n\n\n\n\n\n\ngetRenderInvisible() : bool\n\n\nRetrieve the flag indicating whether or not to render items marked as invisible; defaults to \nfalse\n.\n\n\n\n\n\n\nsetRenderInvisible(bool $flag) : self\n\n\nSet the flag indicating whether or not to render items marked as invisible.\n\n\n\n\n\n\n__call() : mixed\n\n\nProxy method calls to the registered container; this allows you to use the helper as if it were a navigation container. See \nthe example below\n.\n\n\n\n\n\n\nfindActive(/* ... */) : array\n\n\nFind the deepest active page in the container, using the arguments \nAbstractContainer $container, int $minDepth = null, int $maxDepth = -1)\n. If depths are not given, the method will use the values retrieved from \ngetMinDepth()\n and \ngetMaxDepth()\n. The deepest active page must be between \n$minDepth\n and \n$maxDepth\n inclusively. Returns an array containing the found page instance (key \npage\n) and the depth (key \ndepth\n) at which the page was found.\n\n\n\n\n\n\nhtmlify(AbstractPage $page) : string\n\n\nRenders an HTML \na\n element based on the give page.\n\n\n\n\n\n\naccept(AbstractPage $page, bool $recursive = true) : bool\n\n\nDetermine if a page should be accepted when iterating containers. This method checks for page visibility and verifies that the helper's role is allowed access to the page's resource and privilege.\n\n\n\n\n\n\nstatic setDefaultAcl(Zend\\Permissions\\Acl\\AclInterface $acl) : void\n\n\nSet a default ACL instance to use with all navigation helpers.\n\n\n\n\n\n\nstatic setDefaultRole(Zend\\Permissions\\Acl\\Role\\RoleInterface $acl) : void\n\n\nSet a default ACL role instance to use with all navigation helpers.\n\n\n\n\n\n\n\n\nIf a container is not explicitly set, the helper will create an empty\n\nZend\\Navigation\\Navigation\n container when calling \n$helper->getContainer()\n.\n\n\nProxying calls to the navigation container\n\n\nNavigation view helpers use the magic method \n__call()\n to proxy method calls to\nthe navigation container that is registered in the view helper.\n\n\n$this->navigation()->addPage([\n    'type' => 'uri',\n    'label' => 'New page',\n]);\n\n\n\nThe call above will add a page to the container in the \nNavigation\n helper.\n\n\nTranslation of labels and titles\n\n\nThe navigation helpers support translation of page labels and titles. You can\nset a translator of type \nZend\\I18n\\Translator\\TranslatorInterface\n in the\nhelper using \n$helper->setTranslator($translator)\n.\n\n\nIf you want to disable translation, use \n$helper->setTranslatorEnabled(false)\n.\n\n\nThe \nproxy helper\n will inject its own translator to the helper\nit proxies to if the proxied helper doesn't already have a translator.\n\n\n\n\nSitemaps do not use translation\n\n\nThere is no translation in the sitemap helper, since there are no page labels\nor titles involved in an XML sitemap.\n\n\n\n\nIntegration with ACL\n\n\nAll navigational view helpers support ACLs.  An object implementing\n\nZend\\Permissions\\Acl\\AclInterface\n can be assigned to a helper instance with\n\n$helper->setAcl($acl)\n, and role with \n$helper->setRole('member')\n or\n\n$helper->setRole(new Zend\\Permissions\\Acl\\Role\\GenericRole('member'))\n. If an\nACL is used in the helper, the role in the helper must be allowed by the ACL to\naccess a page's \nresource\n and/or have the page's \nprivilege\n for the page to be\nincluded when rendering.\n\n\nIf a page is not accepted by ACL, any descendant page will also be excluded from\nrendering.\n\n\nThe \nproxy helper\n will inject its own ACL and role to the helper\nit proxies to if the proxied helper doesn't already have any.\n\n\nThe examples below all show how ACL affects rendering.\n\n\nNavigation setup used in examples\n\n\nThis example shows the setup of a navigation container for a fictional software company.\n\n\nNotes on the setup:\n\n\n\n\nThe domain for the site is \nwww.example.com\n.\n\n\nInteresting page properties are marked with a comment.\n\n\nUnless otherwise is stated in other examples, the user is requesting the URL\n  \nhttp://www.example.com/products/server/faq/\n, which translates to the page\n  labeled \nFAQ\n under \"Foo Server\".\n\n\nThe assumed ACL and router setup is shown below the container setup.\n\n\n\n\nuse Zend\\Navigation\\Navigation;\n\n/*\n * Navigation container\n\n * Each element in the array will be passed to\n * Zend\\Navigation\\Page\\AbstractPage::factory() when constructing\n * the navigation container below.\n */\n$pages = [\n    [\n        'label'      => 'Home',\n        'title'      => 'Go Home',\n        'module'     => 'default',\n        'controller' => 'index',\n        'action'     => 'index',\n        'order'      => -100, // make sure home is the first page\n    ],\n    [\n        'label'      => 'Special offer this week only!',\n        'module'     => 'store',\n        'controller' => 'offer',\n        'action'     => 'amazing',\n        'visible'    => false, // not visible\n    ],\n    [\n        'label'      => 'Products',\n        'module'     => 'products',\n        'controller' => 'index',\n        'action'     => 'index',\n        'pages'      => [\n            [\n                'label'      => 'Foo Server',\n                'module'     => 'products',\n                'controller' => 'server',\n                'action'     => 'index',\n                'pages'      => [\n                    [\n                        'label'      => 'FAQ',\n                        'module'     => 'products',\n                        'controller' => 'server',\n                        'action'     => 'faq',\n                        'rel'        => [\n                            'canonical' => 'http://www.example.com/?page=faq',\n                            'alternate' => [\n                                'module'     => 'products',\n                                'controller' => 'server',\n                                'action'     => 'faq',\n                                'params'     => ['format' => 'xml'],\n                            ],\n                        ],\n                    ],\n                    [\n                        'label'      => 'Editions',\n                        'module'     => 'products',\n                        'controller' => 'server',\n                        'action'     => 'editions',\n                    ],\n                    [\n                        'label'      => 'System Requirements',\n                        'module'     => 'products',\n                        'controller' => 'server',\n                        'action'     => 'requirements',\n                    ],\n                ],\n            ],\n            [\n                'label'      => 'Foo Studio',\n                'module'     => 'products',\n                'controller' => 'studio',\n                'action'     => 'index',\n                'pages'      => [\n                    [\n                        'label'      => 'Customer Stories',\n                        'module'     => 'products',\n                        'controller' => 'studio',\n                        'action'     => 'customers',\n                    ],\n                    [\n                        'label'      => 'Support',\n                        'module'     => 'products',\n                        'controller' => 'studio',\n                        'action'     => 'support',\n                    ],\n                ],\n            ],\n        ],\n    ],\n    [\n        'label'      => 'Company',\n        'title'      => 'About us',\n        'module'     => 'company',\n        'controller' => 'about',\n        'action'     => 'index',\n        'pages'      => [\n            [\n                'label'      => 'Investor Relations',\n                'module'     => 'company',\n                'controller' => 'about',\n                'action'     => 'investors',\n            ],\n            [\n                'label'      => 'News',\n                'class'      => 'rss', // class\n                'module'     => 'company',\n                'controller' => 'news',\n                'action'     => 'index',\n                'pages'      => [\n                    [\n                        'label'      => 'Press Releases',\n                        'module'     => 'company',\n                        'controller' => 'news',\n                        'action'     => 'press',\n                    ],\n                    [\n                        'label'      => 'Archive',\n                        'route'      => 'archive', // route\n                        'module'     => 'company',\n                        'controller' => 'news',\n                        'action'     => 'archive',\n                    ],\n                ],\n            ],\n        ],\n    ],\n    [\n        'label'      => 'Community',\n        'module'     => 'community',\n        'controller' => 'index',\n        'action'     => 'index',\n        'pages'      => [\n            [\n                'label'      => 'My Account',\n                'module'     => 'community',\n                'controller' => 'account',\n                'action'     => 'index',\n                'resource'   => 'mvc:community.account', // resource\n            ],\n            [\n                'label' => 'Forums',\n                'uri'   => 'http://forums.example.com/',\n                'class' => 'external', // class,\n            ],\n        ],\n    ],\n    [\n        'label'      => 'Administration',\n        'module'     => 'admin',\n        'controller' => 'index',\n        'action'     => 'index',\n        'resource'   => 'mvc:admin', // resource\n        'pages'      => [\n            [\n                'label'      => 'Write new article',\n                'module'     => 'admin',\n                'controller' => 'post',\n                'action'     => 'write',\n            ],\n        ],\n    ],\n];\n\n// Create container from array\n$container = new Navigation($pages);\n\n// Store the container in the proxy helper:\n$view->plugin('navigation')->setContainer($container);\n\n// ...or simply:\n$view->navigation($container);\n\n\n\nIn addition to the container above, the following setup is assumed:\n\n\n<?php\n// module/MyModule/config/module.config.php\n\nreturn [\n    /* ... */\n    'router' [\n        'routes' => [\n            'archive' => [\n                'type'    => 'Segment',\n                'options' => [\n                    'route'    => '/archive/:year',\n                    'defaults' => [\n                        'module'     => 'company',\n                        'controller' => 'news',\n                        'action'     => 'archive',\n                        'year'       => (int) date('Y') - 1,\n                    ],\n                    'constraints' => [\n                        'year' => '\\d+',\n                    ],\n                ],\n            ],\n            /* You can have other routes here... */\n        ],\n    ],\n    /* ... */\n];\n\n\n\n<?php\n// module/MyModule/Module.php\n\nnamespace MyModule;\n\nuse Zend\\View\\HelperPluginManager;\nuse Zend\\Permissions\\Acl\\Acl;\nuse Zend\\Permissions\\Acl\\Role\\GenericRole;\nuse Zend\\Permissions\\Acl\\Resource\\GenericResource;\n\nclass Module\n{\n    /* ... */\n    public function getViewHelperConfig()\n    {\n        return [\n            'factories' => [\n                // This will overwrite the native navigation helper\n                'navigation' => function(HelperPluginManager $pm) {\n                    // Setup ACL:\n                    $acl = new Acl();\n                    $acl->addRole(new GenericRole('member'));\n                    $acl->addRole(new GenericRole('admin'));\n                    $acl->addResource(new GenericResource('mvc:admin'));\n                    $acl->addResource(new GenericResource('mvc:community.account'));\n                    $acl->allow('member', 'mvc:community.account');\n                    $acl->allow('admin', null);\n\n                    // Get an instance of the proxy helper\n                    $navigation = $pm->get('Zend\\View\\Helper\\Navigation');\n\n                    // Store ACL and role in the proxy helper:\n                    $navigation->setAcl($acl);\n                    $navigation->setRole('member');\n\n                    // Return the new navigation helper instance\n                    return $navigation;\n                }\n            ]\n        ];\n    }\n    /* ... */\n}",
            "title": "Intro"
        },
        {
            "location": "/helpers/intro/#view-helpers",
            "text": "The navigation helpers are used for rendering navigational elements from Zend\\Navigation\\Navigation  instances.  There are 5 built-in helpers:   Breadcrumbs , used for rendering the path to the currently\n  active page.  Links , used for rendering navigational head links (e.g.\n   <link rel=\"next\" href=\"...\" /> ).  Menu , used for rendering menus.  Sitemap , used for rendering sitemaps conforming to the\n   Sitemaps XML format .  Navigation , used for proxying calls to other navigational\n  helpers.   All built-in helpers extend  Zend\\View\\Helper\\Navigation\\AbstractHelper , which\nadds integration with zend-acl  and zend-i18n . The abstract class\nimplements the interface  Zend\\View\\Helper\\Navigation\\HelperInterface , which\ndefines the following methods:     Method signature  Description      getContainer() : null\\|AbstractContainer  Retrieve the current navigation container, if any.    hasContainer() : bool  Is any navigation container currently registered?    setContainer(AbstractContainer $container) : self  Set a navigation container.    getTranslator() : null\\|Zend\\I18n\\Translator\\TranslatorInterface  Retrieve the current translator instance, if any.    setTranslator(Zend\\I18n\\Translator\\TranslatorInterface ) : self`  Set a translator instance to use with labels.    hasTranslator() : bool  Is a translator instance present?    isTranslatorEnabled() : bool  Should translation occur? To be  true , both the flag enabling translation must be set, and a translator instance present.    setTranslatorEnabled(bool $flag) : self  Set the flag indicating whether or not translation should occur.    getAcl() : null\\|Zend\\Permissions\\Acl\\AclInterface  Retrieve the current ACL instance, if any.    setAcl(Zend\\Permissions\\Acl\\AclInterface $acl) : self  Set an ACL instance.    hasAcl() : bool  Whether or not an ACL instance is present.    getRole() : null\\|string|\\Zend\\Permissions\\Acl\\Role\\RoleInterface  Retrieve the current ACL role instance, if any.    setRole(string\\|Zend\\Permissions\\Acl\\Role\\RoleInterface $acl) : self  Set an ACL role instance.    hasRole() : bool  Whether or not an ACL role instance is present.    getUseAcl() : bool  Whether or not to use ACLs; both the flag must be enabled and an ACL instance present.    setUseAcl(bool $flag) : self  Set the flag indicating whether or not to use ACLs.    __toString()  Cast the helper to a string value; relies on  render() .    render()  Render the helper to a string.     In addition to the method stubs from the interface, the abstract class also\nimplements the following methods:     Method signature  Description      getIndent() : string  Retrieve the indentation string to use; default is 4 spaces.    setIndent(string\\|int $indent) : self  Set the indentation to use. In the case of an integer, this indicates the number of spaces. Indentation can be specified for all but the  Sitemap  helper.    getMinDepth() : int  Retrieve the minimum depth a page must have to be included in output    setMinDepth(null\\|int $depth) : self  Set the minimum depth a page must have to be included in output;  null  means no minimum.    getMaxDepth() : int  Retrieve the maximum depth a page must have to be included in output    setMaxDepth(null\\|int $depth) : self  Set the maximum depth a page must have to be included in output;  null  means no maximum.    getRenderInvisible() : bool  Retrieve the flag indicating whether or not to render items marked as invisible; defaults to  false .    setRenderInvisible(bool $flag) : self  Set the flag indicating whether or not to render items marked as invisible.    __call() : mixed  Proxy method calls to the registered container; this allows you to use the helper as if it were a navigation container. See  the example below .    findActive(/* ... */) : array  Find the deepest active page in the container, using the arguments  AbstractContainer $container, int $minDepth = null, int $maxDepth = -1) . If depths are not given, the method will use the values retrieved from  getMinDepth()  and  getMaxDepth() . The deepest active page must be between  $minDepth  and  $maxDepth  inclusively. Returns an array containing the found page instance (key  page ) and the depth (key  depth ) at which the page was found.    htmlify(AbstractPage $page) : string  Renders an HTML  a  element based on the give page.    accept(AbstractPage $page, bool $recursive = true) : bool  Determine if a page should be accepted when iterating containers. This method checks for page visibility and verifies that the helper's role is allowed access to the page's resource and privilege.    static setDefaultAcl(Zend\\Permissions\\Acl\\AclInterface $acl) : void  Set a default ACL instance to use with all navigation helpers.    static setDefaultRole(Zend\\Permissions\\Acl\\Role\\RoleInterface $acl) : void  Set a default ACL role instance to use with all navigation helpers.     If a container is not explicitly set, the helper will create an empty Zend\\Navigation\\Navigation  container when calling  $helper->getContainer() .",
            "title": "View Helpers"
        },
        {
            "location": "/helpers/intro/#proxying-calls-to-the-navigation-container",
            "text": "Navigation view helpers use the magic method  __call()  to proxy method calls to\nthe navigation container that is registered in the view helper.  $this->navigation()->addPage([\n    'type' => 'uri',\n    'label' => 'New page',\n]);  The call above will add a page to the container in the  Navigation  helper.",
            "title": "Proxying calls to the navigation container"
        },
        {
            "location": "/helpers/intro/#translation-of-labels-and-titles",
            "text": "The navigation helpers support translation of page labels and titles. You can\nset a translator of type  Zend\\I18n\\Translator\\TranslatorInterface  in the\nhelper using  $helper->setTranslator($translator) .  If you want to disable translation, use  $helper->setTranslatorEnabled(false) .  The  proxy helper  will inject its own translator to the helper\nit proxies to if the proxied helper doesn't already have a translator.",
            "title": "Translation of labels and titles"
        },
        {
            "location": "/helpers/intro/#sitemaps-do-not-use-translation",
            "text": "There is no translation in the sitemap helper, since there are no page labels\nor titles involved in an XML sitemap.",
            "title": "Sitemaps do not use translation"
        },
        {
            "location": "/helpers/intro/#integration-with-acl",
            "text": "All navigational view helpers support ACLs.  An object implementing Zend\\Permissions\\Acl\\AclInterface  can be assigned to a helper instance with $helper->setAcl($acl) , and role with  $helper->setRole('member')  or $helper->setRole(new Zend\\Permissions\\Acl\\Role\\GenericRole('member')) . If an\nACL is used in the helper, the role in the helper must be allowed by the ACL to\naccess a page's  resource  and/or have the page's  privilege  for the page to be\nincluded when rendering.  If a page is not accepted by ACL, any descendant page will also be excluded from\nrendering.  The  proxy helper  will inject its own ACL and role to the helper\nit proxies to if the proxied helper doesn't already have any.  The examples below all show how ACL affects rendering.",
            "title": "Integration with ACL"
        },
        {
            "location": "/helpers/intro/#navigation-setup-used-in-examples",
            "text": "This example shows the setup of a navigation container for a fictional software company.  Notes on the setup:   The domain for the site is  www.example.com .  Interesting page properties are marked with a comment.  Unless otherwise is stated in other examples, the user is requesting the URL\n   http://www.example.com/products/server/faq/ , which translates to the page\n  labeled  FAQ  under \"Foo Server\".  The assumed ACL and router setup is shown below the container setup.   use Zend\\Navigation\\Navigation;\n\n/*\n * Navigation container\n\n * Each element in the array will be passed to\n * Zend\\Navigation\\Page\\AbstractPage::factory() when constructing\n * the navigation container below.\n */\n$pages = [\n    [\n        'label'      => 'Home',\n        'title'      => 'Go Home',\n        'module'     => 'default',\n        'controller' => 'index',\n        'action'     => 'index',\n        'order'      => -100, // make sure home is the first page\n    ],\n    [\n        'label'      => 'Special offer this week only!',\n        'module'     => 'store',\n        'controller' => 'offer',\n        'action'     => 'amazing',\n        'visible'    => false, // not visible\n    ],\n    [\n        'label'      => 'Products',\n        'module'     => 'products',\n        'controller' => 'index',\n        'action'     => 'index',\n        'pages'      => [\n            [\n                'label'      => 'Foo Server',\n                'module'     => 'products',\n                'controller' => 'server',\n                'action'     => 'index',\n                'pages'      => [\n                    [\n                        'label'      => 'FAQ',\n                        'module'     => 'products',\n                        'controller' => 'server',\n                        'action'     => 'faq',\n                        'rel'        => [\n                            'canonical' => 'http://www.example.com/?page=faq',\n                            'alternate' => [\n                                'module'     => 'products',\n                                'controller' => 'server',\n                                'action'     => 'faq',\n                                'params'     => ['format' => 'xml'],\n                            ],\n                        ],\n                    ],\n                    [\n                        'label'      => 'Editions',\n                        'module'     => 'products',\n                        'controller' => 'server',\n                        'action'     => 'editions',\n                    ],\n                    [\n                        'label'      => 'System Requirements',\n                        'module'     => 'products',\n                        'controller' => 'server',\n                        'action'     => 'requirements',\n                    ],\n                ],\n            ],\n            [\n                'label'      => 'Foo Studio',\n                'module'     => 'products',\n                'controller' => 'studio',\n                'action'     => 'index',\n                'pages'      => [\n                    [\n                        'label'      => 'Customer Stories',\n                        'module'     => 'products',\n                        'controller' => 'studio',\n                        'action'     => 'customers',\n                    ],\n                    [\n                        'label'      => 'Support',\n                        'module'     => 'products',\n                        'controller' => 'studio',\n                        'action'     => 'support',\n                    ],\n                ],\n            ],\n        ],\n    ],\n    [\n        'label'      => 'Company',\n        'title'      => 'About us',\n        'module'     => 'company',\n        'controller' => 'about',\n        'action'     => 'index',\n        'pages'      => [\n            [\n                'label'      => 'Investor Relations',\n                'module'     => 'company',\n                'controller' => 'about',\n                'action'     => 'investors',\n            ],\n            [\n                'label'      => 'News',\n                'class'      => 'rss', // class\n                'module'     => 'company',\n                'controller' => 'news',\n                'action'     => 'index',\n                'pages'      => [\n                    [\n                        'label'      => 'Press Releases',\n                        'module'     => 'company',\n                        'controller' => 'news',\n                        'action'     => 'press',\n                    ],\n                    [\n                        'label'      => 'Archive',\n                        'route'      => 'archive', // route\n                        'module'     => 'company',\n                        'controller' => 'news',\n                        'action'     => 'archive',\n                    ],\n                ],\n            ],\n        ],\n    ],\n    [\n        'label'      => 'Community',\n        'module'     => 'community',\n        'controller' => 'index',\n        'action'     => 'index',\n        'pages'      => [\n            [\n                'label'      => 'My Account',\n                'module'     => 'community',\n                'controller' => 'account',\n                'action'     => 'index',\n                'resource'   => 'mvc:community.account', // resource\n            ],\n            [\n                'label' => 'Forums',\n                'uri'   => 'http://forums.example.com/',\n                'class' => 'external', // class,\n            ],\n        ],\n    ],\n    [\n        'label'      => 'Administration',\n        'module'     => 'admin',\n        'controller' => 'index',\n        'action'     => 'index',\n        'resource'   => 'mvc:admin', // resource\n        'pages'      => [\n            [\n                'label'      => 'Write new article',\n                'module'     => 'admin',\n                'controller' => 'post',\n                'action'     => 'write',\n            ],\n        ],\n    ],\n];\n\n// Create container from array\n$container = new Navigation($pages);\n\n// Store the container in the proxy helper:\n$view->plugin('navigation')->setContainer($container);\n\n// ...or simply:\n$view->navigation($container);  In addition to the container above, the following setup is assumed:  <?php\n// module/MyModule/config/module.config.php\n\nreturn [\n    /* ... */\n    'router' [\n        'routes' => [\n            'archive' => [\n                'type'    => 'Segment',\n                'options' => [\n                    'route'    => '/archive/:year',\n                    'defaults' => [\n                        'module'     => 'company',\n                        'controller' => 'news',\n                        'action'     => 'archive',\n                        'year'       => (int) date('Y') - 1,\n                    ],\n                    'constraints' => [\n                        'year' => '\\d+',\n                    ],\n                ],\n            ],\n            /* You can have other routes here... */\n        ],\n    ],\n    /* ... */\n];  <?php\n// module/MyModule/Module.php\n\nnamespace MyModule;\n\nuse Zend\\View\\HelperPluginManager;\nuse Zend\\Permissions\\Acl\\Acl;\nuse Zend\\Permissions\\Acl\\Role\\GenericRole;\nuse Zend\\Permissions\\Acl\\Resource\\GenericResource;\n\nclass Module\n{\n    /* ... */\n    public function getViewHelperConfig()\n    {\n        return [\n            'factories' => [\n                // This will overwrite the native navigation helper\n                'navigation' => function(HelperPluginManager $pm) {\n                    // Setup ACL:\n                    $acl = new Acl();\n                    $acl->addRole(new GenericRole('member'));\n                    $acl->addRole(new GenericRole('admin'));\n                    $acl->addResource(new GenericResource('mvc:admin'));\n                    $acl->addResource(new GenericResource('mvc:community.account'));\n                    $acl->allow('member', 'mvc:community.account');\n                    $acl->allow('admin', null);\n\n                    // Get an instance of the proxy helper\n                    $navigation = $pm->get('Zend\\View\\Helper\\Navigation');\n\n                    // Store ACL and role in the proxy helper:\n                    $navigation->setAcl($acl);\n                    $navigation->setRole('member');\n\n                    // Return the new navigation helper instance\n                    return $navigation;\n                }\n            ]\n        ];\n    }\n    /* ... */\n}",
            "title": "Navigation setup used in examples"
        },
        {
            "location": "/helpers/breadcrumbs/",
            "text": "Breadcrumbs\n\n\nBreadcrumbs are used for indicating where in a sitemap a user is currently browsing, and are\ntypically rendered like the following:\n\n\nYou are here: Home > Products > FantasticProduct 1.0\n\n\n\nThe \nbreadcrumbs()\n helper follows the \nBreadcrumbs Pattern\n\nas outlined in the Yahoo! Design Pattern Library, and allows simple\ncustomization (minimum/maximum depth, indentation, separator, and whether the\nlast element should be linked), or rendering using a partial view script.\n\n\nThe Breadcrumbs helper finds the deepest active page in a navigation container,\nand renders an upwards path to the root. For MVC pages, the \"activeness\" of a\npage is determined by inspecting the request object, as stated in the section on\n\nMVC pages\n.\n\n\nThe helper sets the \nminDepth\n property to 1 by default, meaning breadcrumbs\nwill not be rendered if the deepest active page is a root page. If \nmaxDepth\n is\nspecified, the helper will stop rendering when at the specified depth (e.g. stop\nat level 2 even if the deepest active page is on level 3).\n\n\nMethods in the breadcrumbs helper:\n\n\n\n\n\n\n\n\nMethod signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngetSeparator() : string\n\n\nRetrieves the separator string to use between breadcrumbs; default is \n&gt;\n.\n\n\n\n\n\n\nsetSeparator(string $separator) : self\n\n\nSet the separator string to use between breadcrumbs.\n\n\n\n\n\n\ngetLinkLast() : bool\n\n\nRetrieve the flag indicating whether the last breadcrumb should be rendered as an anchor; defaults to \nfalse\n.\n\n\n\n\n\n\nsetLinkLast(bool $flag) : self\n\n\nSet the flag indicating whether the last breadcrumb should be rendered as an anchor.\n\n\n\n\n\n\ngetPartial() : string\\|array\n\n\nRetrieve a partial view script that should be used for rendering breadcrumbs. If a partial view script is set, the helper's \nrender()\n method will use the \nrenderPartial()\n method. The helper expects the partial to be a \nstring\n or an \narray\n with two elements. If the partial is a \nstring\n, it denotes the name of the partial script to use. If it is an \narray\n, the first element will be used as the name of the partial view script, and the second element is the module where the script is found.\n\n\n\n\n\n\nsetPartial(string\\|array $partial) : self\n\n\nSet the partial view script to use when rendering breadcrumbs; see \ngetPartial()\n for acceptable values.\n\n\n\n\n\n\nrenderStraight()\n\n\nThe default render method used when no partial view script is present.\n\n\n\n\n\n\nrenderPartial()\n\n\nUsed for rendering using a partial view script.\n\n\n\n\n\n\n\n\nBasic usage\n\n\nThis example shows how to render breadcrumbs with default settings.\n\n\nIn a view script or layout:\n\n\n<?= $this->navigation()->breadcrumbs(); ?>\n\n\n\nThe call above takes advantage of the magic \n__toString()\n method, and is\nequivalent to:\n\n\n<?= $this->navigation()->breadcrumbs()->render(); ?>\n\n\n\nOutput:\n\n\n<a href=\"/products\">Products</a> &gt; <a href=\"/products/server\">Foo Server</a> &gt; FAQ\n\n\n\nSpecifying indentation\n\n\nThis example shows how to render breadcrumbs with initial indentation.\n\n\nRendering with 8 spaces indentation:\n\n\n<?= $this->navigation()->breadcrumbs()->setIndent(8) ?>\n\n\n\nOutput:\n\n\n        <a href=\"/products\">Products</a> &gt; <a href=\"/products/server\">Foo Server</a> &gt; FAQ\n\n\n\nCustomize output\n\n\nThis example shows how to customize breadcrumbs output by specifying multiple options.\n\n\nIn a view script or layout:\n\n\n<?= $this->navigation()->breadcrumbs()\n    ->setLinkLast(true)                   // link last page\n    ->setMaxDepth(1)                      // stop at level 1\n    ->setSeparator(' \u25b6' . PHP_EOL);       // cool separator with newline\n?>\n\n\n\nOutput:\n\n\n<a href=\"/products\">Products</a> \u25b6\n<a href=\"/products/server\">Foo Server</a>\n\n\n\nSetting minimum depth required to render breadcrumbs:\n\n\n<?= $this->navigation()->breadcrumbs()->setMinDepth(10) ?>\n\n\n\nOutput: Nothing, because the deepest active page is not at level 10 or deeper.\n\n\nRendering using a partial view script\n\n\nThis example shows how to render customized breadcrumbs using a partial vew\nscript. By calling \nsetPartial()\n, you can specify a partial view script that\nwill be used when calling \nrender()\n.  When a partial is specified, the\n\nrenderPartial()\n method will be called when emitting the breadcrumbs. This\nmethod will find the deepest active page and pass an array of pages that leads\nto the active page to the partial view script.\n\n\nIn a layout:\n\n\necho $this->navigation()->breadcrumbs()\n    ->setPartial('my-module/partials/breadcrumbs');\n\n\n\nContents of \nmodule/MyModule/view/my-module/partials/breadcrumbs.phtml\n:\n\n\n<?= implode(', ', array_map(function ($a) {\n  return $a->getLabel();\n}, $this->pages)); ?>\n\n\n\nOutput:\n\n\nProducts, Foo Server, FAQ",
            "title": "Breadcrumbs"
        },
        {
            "location": "/helpers/breadcrumbs/#breadcrumbs",
            "text": "Breadcrumbs are used for indicating where in a sitemap a user is currently browsing, and are\ntypically rendered like the following:  You are here: Home > Products > FantasticProduct 1.0  The  breadcrumbs()  helper follows the  Breadcrumbs Pattern \nas outlined in the Yahoo! Design Pattern Library, and allows simple\ncustomization (minimum/maximum depth, indentation, separator, and whether the\nlast element should be linked), or rendering using a partial view script.  The Breadcrumbs helper finds the deepest active page in a navigation container,\nand renders an upwards path to the root. For MVC pages, the \"activeness\" of a\npage is determined by inspecting the request object, as stated in the section on MVC pages .  The helper sets the  minDepth  property to 1 by default, meaning breadcrumbs\nwill not be rendered if the deepest active page is a root page. If  maxDepth  is\nspecified, the helper will stop rendering when at the specified depth (e.g. stop\nat level 2 even if the deepest active page is on level 3).  Methods in the breadcrumbs helper:     Method signature  Description      getSeparator() : string  Retrieves the separator string to use between breadcrumbs; default is  &gt; .    setSeparator(string $separator) : self  Set the separator string to use between breadcrumbs.    getLinkLast() : bool  Retrieve the flag indicating whether the last breadcrumb should be rendered as an anchor; defaults to  false .    setLinkLast(bool $flag) : self  Set the flag indicating whether the last breadcrumb should be rendered as an anchor.    getPartial() : string\\|array  Retrieve a partial view script that should be used for rendering breadcrumbs. If a partial view script is set, the helper's  render()  method will use the  renderPartial()  method. The helper expects the partial to be a  string  or an  array  with two elements. If the partial is a  string , it denotes the name of the partial script to use. If it is an  array , the first element will be used as the name of the partial view script, and the second element is the module where the script is found.    setPartial(string\\|array $partial) : self  Set the partial view script to use when rendering breadcrumbs; see  getPartial()  for acceptable values.    renderStraight()  The default render method used when no partial view script is present.    renderPartial()  Used for rendering using a partial view script.",
            "title": "Breadcrumbs"
        },
        {
            "location": "/helpers/breadcrumbs/#basic-usage",
            "text": "This example shows how to render breadcrumbs with default settings.  In a view script or layout:  <?= $this->navigation()->breadcrumbs(); ?>  The call above takes advantage of the magic  __toString()  method, and is\nequivalent to:  <?= $this->navigation()->breadcrumbs()->render(); ?>  Output:  <a href=\"/products\">Products</a> &gt; <a href=\"/products/server\">Foo Server</a> &gt; FAQ",
            "title": "Basic usage"
        },
        {
            "location": "/helpers/breadcrumbs/#specifying-indentation",
            "text": "This example shows how to render breadcrumbs with initial indentation.  Rendering with 8 spaces indentation:  <?= $this->navigation()->breadcrumbs()->setIndent(8) ?>  Output:          <a href=\"/products\">Products</a> &gt; <a href=\"/products/server\">Foo Server</a> &gt; FAQ",
            "title": "Specifying indentation"
        },
        {
            "location": "/helpers/breadcrumbs/#customize-output",
            "text": "This example shows how to customize breadcrumbs output by specifying multiple options.  In a view script or layout:  <?= $this->navigation()->breadcrumbs()\n    ->setLinkLast(true)                   // link last page\n    ->setMaxDepth(1)                      // stop at level 1\n    ->setSeparator(' \u25b6' . PHP_EOL);       // cool separator with newline\n?>  Output:  <a href=\"/products\">Products</a> \u25b6\n<a href=\"/products/server\">Foo Server</a>  Setting minimum depth required to render breadcrumbs:  <?= $this->navigation()->breadcrumbs()->setMinDepth(10) ?>  Output: Nothing, because the deepest active page is not at level 10 or deeper.",
            "title": "Customize output"
        },
        {
            "location": "/helpers/breadcrumbs/#rendering-using-a-partial-view-script",
            "text": "This example shows how to render customized breadcrumbs using a partial vew\nscript. By calling  setPartial() , you can specify a partial view script that\nwill be used when calling  render() .  When a partial is specified, the renderPartial()  method will be called when emitting the breadcrumbs. This\nmethod will find the deepest active page and pass an array of pages that leads\nto the active page to the partial view script.  In a layout:  echo $this->navigation()->breadcrumbs()\n    ->setPartial('my-module/partials/breadcrumbs');  Contents of  module/MyModule/view/my-module/partials/breadcrumbs.phtml :  <?= implode(', ', array_map(function ($a) {\n  return $a->getLabel();\n}, $this->pages)); ?>  Output:  Products, Foo Server, FAQ",
            "title": "Rendering using a partial view script"
        },
        {
            "location": "/helpers/links/",
            "text": "Links\n\n\nThe \nlinks()\n helper is used for rendering HTML \nLINK\n elements. Links are used for describing\ndocument relationships of the currently active page. Read more about links and\nlink types at:\n\n\n\n\nDocument relationships: the LINK element (HTML4 W3C Rec.)\n\n\nLink types (HTML4 W3C Rec.)\n\n\n\n\nThere are two types of relations; forward and reverse, indicated by the kewyords\n\nrel\n and \nrev\n. Most methods in the helper will take a \n$rel\n param, which must\nbe either \nrel\n or \nrev\n. Most methods also take a \n$type\n param, which is used\nfor specifying the link type (e.g. \nalternate\n, \nstart\n, \nnext\n, \nprev\n,\n\nchapter\n, etc).\n\n\nRelationships can be added to page objects manually, or found by traversing the\ncontainer registered in the helper. The method \nfindRelation($page, $rel,\n$type)\n will first try to find the given \n$rel\n of \n$type\n from the \n$page\n by\ncalling \n$page>findRel($type)\n or \n$page>findRel($type)\n. If the \n$page\n has a\nrelation that can be converted to a page instance, that relation will be used.\nIf the \n$page\n instance doesn't have the specified \n$type\n, the helper will look\nfor a method in the helper named \nsearch$rel$type\n (e.g. \nsearchRelNext()\n or\n\nsearchRevAlternate()\n). If such a method exists, it will be used for\ndetermining the \n$page\n's relation by traversing the container.\n\n\nNot all relations can be determined by traversing the container. These are the\nrelations that will be found by searching:\n\n\n\n\nsearchRelStart()\n, forward \nstart\n relation: the first page in the container.\n\n\nsearchRelNext()\n, forward \nnext\n relation; finds the next page in the\n  container, i.e. the page after the active page.\n\n\nsearchRelPrev()\n, forward \nprev\n relation; finds the previous page, i.e. the\n  page before the active page.\n\n\nsearchRelChapter()\n, forward \nchapter\n relations; finds all pages on level 0\n  except the \nstart\n relation or the active page if it's on level 0.\n\n\nsearchRelSection()\n, forward \nsection\n relations; finds all child pages of\n  the active page if the active page is on level 0 (a \nchapter\n).\n\n\nsearchRelSubsection()\n, forward \nsubsection\n relations; finds all child pages\n  of the active page if the active pages is on level 1 (a \nsection\n).\n\n\nsearchRevSection()\n, reverse \nsection\n relation; finds the parent of the\n  active page if the active page is on level 1 (a \nsection\n).\n\n\nsearchRevSubsection()\n, reverse \nsubsection\n relation; finds the parent of\n  the active page if the active page is on level 2 (a \nsubsection\n).\n\n\n\n\n\n\nAllowed relation types\n\n\nWhen looking for relations in the page instance (\n$page->getRel($type)\n or\n\n$page->getRev($type)\n), the helper accepts the values of type \nstring\n,\n\narray\n, \nTraversable\n,\nor \nZend\\Navigation\\Page\\AbstractPage\n:\n\n\n\n\nAbstractPage\n instances are used directly.\n\n\nIf a string is found, it will be converted to a \nZend\\Navigation\\Page\\Uri\n.\n\n\nIf an array or \nTraversable\n is found, it will be converted to one or\n  several page instances. If the first key is numeric, it will be considered to\n  contain several pages, and each element will be passed to the \npage\n  factory\n.  If the first key\n  is not numeric, the value will be passed to the page factory directly, and a\n  single page will be returned.\n\n\n\n\n\n\nThe helper also supports magic methods for finding relations. E.g. to find\nforward alternate relations, call \n$helper->findRelAlternate($page)\n, and to\nfind reverse section relations, call \n$helper->findRevSection($page)\n. Those\ncalls correspond to \n$helper->findRelation($page, 'rel', 'alternate')\n and\n\n$helper->findRelation($page, 'rev', 'section')\n, respectively.\n\n\nTo customize which relations should be rendered, the helper uses a render flag.\nThe render flag is an integer value, and will be used in a\n\nbitwise and (\n&\n) operation\n against\nthe helper's render constants to determine if the relation that belongs to the\nrender constant should be rendered.\n\n\nSee the example below for more information.\n\n\nThe \nLinks\n helper defines the following constants:\n\n\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_ALTERNATE\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_STYLESHEET\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_START\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_NEXT\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_PREV\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_CONTENTS\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_INDEX\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_GLOSSARY\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_COPYRIGHT\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_CHAPTER\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_SECTION\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_SUBSECTION\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_APPENDIX\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_HELP\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_BOOKMARK\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_CUSTOM\n\n\nZend\\View\\Helper\\Navigation\\Links::RENDER_ALL\n\n\n\n\nThe constants from \nRENDER_ALTERNATE\n to \nRENDER_BOOKMARK\n denote standard HTML\nlink types.  \nRENDER_CUSTOM\n denotes non-standard relations specified in pages.\n\nRENDER_ALL\n denotes standard and non-standard relations.\n\n\nMethods in the links helper:\n\n\n\n\n\n\n\n\nMethod signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngetRenderFlag() : int\n\n\nRetrieves the render flag; default is \nRENDER_ALL\n.\n\n\n\n\n\n\nsetRenderFlag(int $flag) : self\n\n\nSet the render flag; see examples below.\n\n\n\n\n\n\nfindAllRelations(AbstractPage $page, int $flag = null) : array\n\n\nFinds all relations of all types for a given page.\n\n\n\n\n\n\nfindRelation(AbstractPage $page, string $rel, string $type) : AbstractPage\\|array\\|null\n\n\nFinds all relations of a given type from a given page.\n\n\n\n\n\n\nsearchRel*(AbstractPage $page) : AbstractPage\\|null\n\n\nTraverses a container to find forward relations to the \nStart\n page, the \nNext\n page, the \nPrev\nious page, \nChapter\ns, \nSection\ns, and \nSubsection\ns.\n\n\n\n\n\n\nsearchRev*(AbstractPage $page) : AbstractPage\\|null\n\n\nTraverses a container to find reverse relations to \nSection\ns or \nSubsection\ns.\n\n\n\n\n\n\nrenderLink(AbstractPage $page, string $attrib, string $relation) : string\n\n\nRenders a single \nlink\n element.\n\n\n\n\n\n\n\n\nBasic usage\n\n\nSpecify relations in pages\n\n\nThis example shows how to specify relations in pages.\n\n\nuse Zend\\Config\\Config;\nuse Zend\\Navigation\\Navigation;\nuse Zend\\Navigation\\Page\\AbstractPage;\n\n$container = new Navigation([\n    [\n        'label' => 'Relations using strings',\n        'rel'   => [\n            'alternate' => 'http://www.example.org/',\n        ],\n        'rev'   => [\n            'alternate' => 'http://www.example.net/',\n        ],\n    ],\n    [\n        'label' => 'Relations using arrays',\n        'rel'   => [\n            'alternate' => [\n                'label' => 'Example.org',\n                'uri'   => 'http://www.example.org/',\n            ],\n        ],\n    ],\n    [\n        'label' => 'Relations using configs',\n        'rel'   => [\n            'alternate' => new Config([\n                'label' => 'Example.org',\n                'uri'   => 'http://www.example.org/',\n            ]),\n        ],\n    ],\n    [\n        'label' => 'Relations using pages instance',\n        'rel'   => [\n            'alternate' => AbstractPage::factory([\n                'label' => 'Example.org',\n                'uri'   => 'http://www.example.org/',\n            ]),\n        ],\n    ],\n]);\n\n\n\nDefault rendering of links\n\n\nThis example shows how to render a menu from a container registered in the\nview helper.\n\n\nIn a view script or layout:\n\n\n<?= $this->navigation()->links() ?>\n\n\n\nOutput:\n\n\n<link rel=\"alternate\" href=\"/products/server/faq/format/xml\">\n<link rel=\"start\" href=\"/\" title=\"Home\">\n<link rel=\"next\" href=\"/products/server/editions\" title=\"Editions\">\n<link rel=\"prev\" href=\"/products/server\" title=\"Foo Server\">\n<link rel=\"chapter\" href=\"/products\" title=\"Products\">\n<link rel=\"chapter\" href=\"/company/about\" title=\"Company\">\n<link rel=\"chapter\" href=\"/community\" title=\"Community\">\n<link rel=\"canonical\" href=\"http://www.example.com/?page=server-faq\">\n<link rev=\"subsection\" href=\"/products/server\" title=\"Foo Server\">\n\n\n\nSpecify which relations to render\n\n\nThis example shows how to specify which relations to find and render.\n\n\nRender only start, next, and prev:\n\n\nuse Zend\\View\\Helper\\Navigation\\Links;\n\n$links = $this->navigation()->links();\n$links->setRenderFlag(Links::RENDER_START | Links::RENDER_NEXT | Links::RENDER_PREV);\necho $links;\n\n\n\nOutput:\n\n\n<link rel=\"start\" href=\"/\" title=\"Home\">\n<link rel=\"next\" href=\"/products/server/editions\" title=\"Editions\">\n<link rel=\"prev\" href=\"/products/server\" title=\"Foo Server\">\n\n\n\nRender only native link types:\n\n\n$links->setRenderFlag(Links::RENDER_ALL ^ Links::RENDER_CUSTOM);\necho $links;\n\n\n\nOutput:\n\n\n<link rel=\"alternate\" href=\"/products/server/faq/format/xml\">\n<link rel=\"start\" href=\"/\" title=\"Home\">\n<link rel=\"next\" href=\"/products/server/editions\" title=\"Editions\">\n<link rel=\"prev\" href=\"/products/server\" title=\"Foo Server\">\n<link rel=\"chapter\" href=\"/products\" title=\"Products\">\n<link rel=\"chapter\" href=\"/company/about\" title=\"Company\">\n<link rel=\"chapter\" href=\"/community\" title=\"Community\">\n<link rev=\"subsection\" href=\"/products/server\" title=\"Foo Server\">\n\n\n\nRender all but chapters:\n\n\n$links->setRenderFlag(Links::RENDER_ALL ^ Links::RENDER_CHAPTER);\necho $links;\n\n\n\nOutput:\n\n\n<link rel=\"alternate\" href=\"/products/server/faq/format/xml\">\n<link rel=\"start\" href=\"/\" title=\"Home\">\n<link rel=\"next\" href=\"/products/server/editions\" title=\"Editions\">\n<link rel=\"prev\" href=\"/products/server\" title=\"Foo Server\">\n<link rel=\"canonical\" href=\"http://www.example.com/?page=server-faq\">\n<link rev=\"subsection\" href=\"/products/server\" title=\"Foo Server\">",
            "title": "Links"
        },
        {
            "location": "/helpers/links/#links",
            "text": "The  links()  helper is used for rendering HTML  LINK  elements. Links are used for describing\ndocument relationships of the currently active page. Read more about links and\nlink types at:   Document relationships: the LINK element (HTML4 W3C Rec.)  Link types (HTML4 W3C Rec.)   There are two types of relations; forward and reverse, indicated by the kewyords rel  and  rev . Most methods in the helper will take a  $rel  param, which must\nbe either  rel  or  rev . Most methods also take a  $type  param, which is used\nfor specifying the link type (e.g.  alternate ,  start ,  next ,  prev , chapter , etc).  Relationships can be added to page objects manually, or found by traversing the\ncontainer registered in the helper. The method  findRelation($page, $rel,\n$type)  will first try to find the given  $rel  of  $type  from the  $page  by\ncalling  $page>findRel($type)  or  $page>findRel($type) . If the  $page  has a\nrelation that can be converted to a page instance, that relation will be used.\nIf the  $page  instance doesn't have the specified  $type , the helper will look\nfor a method in the helper named  search$rel$type  (e.g.  searchRelNext()  or searchRevAlternate() ). If such a method exists, it will be used for\ndetermining the  $page 's relation by traversing the container.  Not all relations can be determined by traversing the container. These are the\nrelations that will be found by searching:   searchRelStart() , forward  start  relation: the first page in the container.  searchRelNext() , forward  next  relation; finds the next page in the\n  container, i.e. the page after the active page.  searchRelPrev() , forward  prev  relation; finds the previous page, i.e. the\n  page before the active page.  searchRelChapter() , forward  chapter  relations; finds all pages on level 0\n  except the  start  relation or the active page if it's on level 0.  searchRelSection() , forward  section  relations; finds all child pages of\n  the active page if the active page is on level 0 (a  chapter ).  searchRelSubsection() , forward  subsection  relations; finds all child pages\n  of the active page if the active pages is on level 1 (a  section ).  searchRevSection() , reverse  section  relation; finds the parent of the\n  active page if the active page is on level 1 (a  section ).  searchRevSubsection() , reverse  subsection  relation; finds the parent of\n  the active page if the active page is on level 2 (a  subsection ).",
            "title": "Links"
        },
        {
            "location": "/helpers/links/#allowed-relation-types",
            "text": "When looking for relations in the page instance ( $page->getRel($type)  or $page->getRev($type) ), the helper accepts the values of type  string , array ,  Traversable ,\nor  Zend\\Navigation\\Page\\AbstractPage :   AbstractPage  instances are used directly.  If a string is found, it will be converted to a  Zend\\Navigation\\Page\\Uri .  If an array or  Traversable  is found, it will be converted to one or\n  several page instances. If the first key is numeric, it will be considered to\n  contain several pages, and each element will be passed to the  page\n  factory .  If the first key\n  is not numeric, the value will be passed to the page factory directly, and a\n  single page will be returned.    The helper also supports magic methods for finding relations. E.g. to find\nforward alternate relations, call  $helper->findRelAlternate($page) , and to\nfind reverse section relations, call  $helper->findRevSection($page) . Those\ncalls correspond to  $helper->findRelation($page, 'rel', 'alternate')  and $helper->findRelation($page, 'rev', 'section') , respectively.  To customize which relations should be rendered, the helper uses a render flag.\nThe render flag is an integer value, and will be used in a bitwise and ( & ) operation  against\nthe helper's render constants to determine if the relation that belongs to the\nrender constant should be rendered.  See the example below for more information.  The  Links  helper defines the following constants:   Zend\\View\\Helper\\Navigation\\Links::RENDER_ALTERNATE  Zend\\View\\Helper\\Navigation\\Links::RENDER_STYLESHEET  Zend\\View\\Helper\\Navigation\\Links::RENDER_START  Zend\\View\\Helper\\Navigation\\Links::RENDER_NEXT  Zend\\View\\Helper\\Navigation\\Links::RENDER_PREV  Zend\\View\\Helper\\Navigation\\Links::RENDER_CONTENTS  Zend\\View\\Helper\\Navigation\\Links::RENDER_INDEX  Zend\\View\\Helper\\Navigation\\Links::RENDER_GLOSSARY  Zend\\View\\Helper\\Navigation\\Links::RENDER_COPYRIGHT  Zend\\View\\Helper\\Navigation\\Links::RENDER_CHAPTER  Zend\\View\\Helper\\Navigation\\Links::RENDER_SECTION  Zend\\View\\Helper\\Navigation\\Links::RENDER_SUBSECTION  Zend\\View\\Helper\\Navigation\\Links::RENDER_APPENDIX  Zend\\View\\Helper\\Navigation\\Links::RENDER_HELP  Zend\\View\\Helper\\Navigation\\Links::RENDER_BOOKMARK  Zend\\View\\Helper\\Navigation\\Links::RENDER_CUSTOM  Zend\\View\\Helper\\Navigation\\Links::RENDER_ALL   The constants from  RENDER_ALTERNATE  to  RENDER_BOOKMARK  denote standard HTML\nlink types.   RENDER_CUSTOM  denotes non-standard relations specified in pages. RENDER_ALL  denotes standard and non-standard relations.  Methods in the links helper:     Method signature  Description      getRenderFlag() : int  Retrieves the render flag; default is  RENDER_ALL .    setRenderFlag(int $flag) : self  Set the render flag; see examples below.    findAllRelations(AbstractPage $page, int $flag = null) : array  Finds all relations of all types for a given page.    findRelation(AbstractPage $page, string $rel, string $type) : AbstractPage\\|array\\|null  Finds all relations of a given type from a given page.    searchRel*(AbstractPage $page) : AbstractPage\\|null  Traverses a container to find forward relations to the  Start  page, the  Next  page, the  Prev ious page,  Chapter s,  Section s, and  Subsection s.    searchRev*(AbstractPage $page) : AbstractPage\\|null  Traverses a container to find reverse relations to  Section s or  Subsection s.    renderLink(AbstractPage $page, string $attrib, string $relation) : string  Renders a single  link  element.",
            "title": "Allowed relation types"
        },
        {
            "location": "/helpers/links/#basic-usage",
            "text": "",
            "title": "Basic usage"
        },
        {
            "location": "/helpers/links/#specify-relations-in-pages",
            "text": "This example shows how to specify relations in pages.  use Zend\\Config\\Config;\nuse Zend\\Navigation\\Navigation;\nuse Zend\\Navigation\\Page\\AbstractPage;\n\n$container = new Navigation([\n    [\n        'label' => 'Relations using strings',\n        'rel'   => [\n            'alternate' => 'http://www.example.org/',\n        ],\n        'rev'   => [\n            'alternate' => 'http://www.example.net/',\n        ],\n    ],\n    [\n        'label' => 'Relations using arrays',\n        'rel'   => [\n            'alternate' => [\n                'label' => 'Example.org',\n                'uri'   => 'http://www.example.org/',\n            ],\n        ],\n    ],\n    [\n        'label' => 'Relations using configs',\n        'rel'   => [\n            'alternate' => new Config([\n                'label' => 'Example.org',\n                'uri'   => 'http://www.example.org/',\n            ]),\n        ],\n    ],\n    [\n        'label' => 'Relations using pages instance',\n        'rel'   => [\n            'alternate' => AbstractPage::factory([\n                'label' => 'Example.org',\n                'uri'   => 'http://www.example.org/',\n            ]),\n        ],\n    ],\n]);",
            "title": "Specify relations in pages"
        },
        {
            "location": "/helpers/links/#default-rendering-of-links",
            "text": "This example shows how to render a menu from a container registered in the\nview helper.  In a view script or layout:  <?= $this->navigation()->links() ?>  Output:  <link rel=\"alternate\" href=\"/products/server/faq/format/xml\">\n<link rel=\"start\" href=\"/\" title=\"Home\">\n<link rel=\"next\" href=\"/products/server/editions\" title=\"Editions\">\n<link rel=\"prev\" href=\"/products/server\" title=\"Foo Server\">\n<link rel=\"chapter\" href=\"/products\" title=\"Products\">\n<link rel=\"chapter\" href=\"/company/about\" title=\"Company\">\n<link rel=\"chapter\" href=\"/community\" title=\"Community\">\n<link rel=\"canonical\" href=\"http://www.example.com/?page=server-faq\">\n<link rev=\"subsection\" href=\"/products/server\" title=\"Foo Server\">",
            "title": "Default rendering of links"
        },
        {
            "location": "/helpers/links/#specify-which-relations-to-render",
            "text": "This example shows how to specify which relations to find and render.  Render only start, next, and prev:  use Zend\\View\\Helper\\Navigation\\Links;\n\n$links = $this->navigation()->links();\n$links->setRenderFlag(Links::RENDER_START | Links::RENDER_NEXT | Links::RENDER_PREV);\necho $links;  Output:  <link rel=\"start\" href=\"/\" title=\"Home\">\n<link rel=\"next\" href=\"/products/server/editions\" title=\"Editions\">\n<link rel=\"prev\" href=\"/products/server\" title=\"Foo Server\">  Render only native link types:  $links->setRenderFlag(Links::RENDER_ALL ^ Links::RENDER_CUSTOM);\necho $links;  Output:  <link rel=\"alternate\" href=\"/products/server/faq/format/xml\">\n<link rel=\"start\" href=\"/\" title=\"Home\">\n<link rel=\"next\" href=\"/products/server/editions\" title=\"Editions\">\n<link rel=\"prev\" href=\"/products/server\" title=\"Foo Server\">\n<link rel=\"chapter\" href=\"/products\" title=\"Products\">\n<link rel=\"chapter\" href=\"/company/about\" title=\"Company\">\n<link rel=\"chapter\" href=\"/community\" title=\"Community\">\n<link rev=\"subsection\" href=\"/products/server\" title=\"Foo Server\">  Render all but chapters:  $links->setRenderFlag(Links::RENDER_ALL ^ Links::RENDER_CHAPTER);\necho $links;  Output:  <link rel=\"alternate\" href=\"/products/server/faq/format/xml\">\n<link rel=\"start\" href=\"/\" title=\"Home\">\n<link rel=\"next\" href=\"/products/server/editions\" title=\"Editions\">\n<link rel=\"prev\" href=\"/products/server\" title=\"Foo Server\">\n<link rel=\"canonical\" href=\"http://www.example.com/?page=server-faq\">\n<link rev=\"subsection\" href=\"/products/server\" title=\"Foo Server\">",
            "title": "Specify which relations to render"
        },
        {
            "location": "/helpers/menu/",
            "text": "Menu\n\n\nThe \nmenu()\n helper is used for rendering menus from navigation containers. By\ndefault, the menu will be rendered using HTML \nUL\n and \nLI\n tags, but the helper\nalso allows using a partial view script.\n\n\nMethods in the Menu helper:\n\n\n\n\n\n\n\n\nMethod signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngetUlClass() : string\n\n\nRetrieve the CSS class used when rendering \nul\n elements in \nrenderMenu()\n.\n\n\n\n\n\n\nsetUlClass(string $class) : self\n\n\nSet the CSS class to use when rendering \nul\n elements in \nrenderMenu()\n.\n\n\n\n\n\n\ngetOnlyActiveBranch() : bool\n\n\nRetrieve the flag specifying whether or not to render only the active branch of a container.\n\n\n\n\n\n\nsetOnlyActiveBranch(bool $flag) : self\n\n\nSet the flag specifying whether or not to render only the active branch of a container.\n\n\n\n\n\n\ngetRenderParents() : bool\n\n\nRetrieve the flag specifying whether or not to render parent pages when rendering the active branch of a container.\n\n\n\n\n\n\nsetRenderParents(bool $flag) : self\n\n\nSet the flag specifying whether or not to render parent pages when rendering the active branch of a container. When set to \nfalse\n, only the deepest active menu will be rendered.\n\n\n\n\n\n\ngetPartial() : string|array\n\n\nRetrieve a partial view script that should be used for rendering breadcrumbs. If a partial view script is set, the helper's \nrender()\n method will use the \nrenderPartial()\n method. The helper expects the partial to be a \nstring\n or an \narray\n with two elements. If the partial is a \nstring\n, it denotes the name of the partial script to use. If it is an \narray\n, the first element will be used as the name of the partial view script, and the second element is the module where the script is found.\n\n\n\n\n\n\nsetPartial(string|array $partial) : self\n\n\nSet the partial view script to use when rendering breadcrumbs; see \ngetPartial()\n for acceptable values.\n\n\n\n\n\n\nhtmlify(/* ... */) : string\n\n\nOverrides the method from the abstract class, with the argument list \nAbstractPage $page, bool $escapeLabel = true, bool $addClassToListItem = false\n. Returns \nspan\n elements if the page has no \nhref\n.\n\n\n\n\n\n\nrenderMenu(AbstractContainer $container = null, $options = []) : string\n\n\nDefault rendering method; renders a container as an HTML \nUL\n list. If \n$container\n is not given, the container registered in the helper will be rendered.  \n$options\n is used for overriding options specified temporarily without resetting the values in the helper instance; if none are set, those already provided to the helper will be used. Options are an associative array where each key corresponds to an option in the helper. See the table below for recognized options.\n\n\n\n\n\n\nrenderPartial(AbstractContainer $container = null, string|array $partial = null) : string\n\n\nUsed for rendering the menu using a partial view script.\n\n\n\n\n\n\nrenderSubMenu(/* ... */) : string\n\n\nRenders the deepest menu level of a container's active branch. Accepts the arguments \nAbstractContainer $container\n, \nstring $ulClass = null\n, \nstring|int $indent = null\n (an integer value indicates number of spaces to use), \nstring $liActiveClass = null\n.\n\n\n\n\n\n\n\n\nThe following are options recognized by the \nrenderMenu()\n method:\n\n\n\n\n\n\n\n\nOption name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nindent\n\n\nIndentation. Expects a \nstring\n or an \nint\n value.\n\n\n\n\n\n\nminDepth\n\n\nMinimum depth. Expects an \nint\n or \nnull\n (no minimum depth).\n\n\n\n\n\n\nmaxDepth\n\n\nMaximum depth. Expects an \nint\n or \nnull\n (no maximum depth).\n\n\n\n\n\n\nulClass\n\n\nCSS class for \nul\n element. Expects a \nstring\n.\n\n\n\n\n\n\nonlyActiveBranch\n\n\nWhether only active branch should be rendered. Expects a \nboolean\n value.\n\n\n\n\n\n\nrenderParents\n\n\nWhether parents should be rendered if only rendering active branch. Expects a \nboolean\n value.\n\n\n\n\n\n\n\n\nBasic usage\n\n\nThis example shows how to render a menu from a container registered/found in the\nview helper. Notice how pages are filtered out based on visibility and ACL.\n\n\nIn a view script or layout:\n\n\n<?= $this->navigation()->menu()->render() ?>\n\n\n\nOr:\n\n\n<?= $this->navigation()->menu() ?>\n\n\n\nOutput:\n\n\n<ul class=\"navigation\">\n    <li>\n        <a title=\"Go Home\" href=\"/\">Home</a>\n    </li>\n    <li class=\"active\">\n        <a href=\"/products\">Products</a>\n        <ul>\n            <li class=\"active\">\n                <a href=\"/products/server\">Foo Server</a>\n                <ul>\n                    <li class=\"active\">\n                        <a href=\"/products/server/faq\">FAQ</a>\n                    </li>\n                    <li>\n                        <a href=\"/products/server/editions\">Editions</a>\n                    </li>\n                    <li>\n                        <a href=\"/products/server/requirements\">System Requirements</a>\n                    </li>\n                </ul>\n            </li>\n            <li>\n                <a href=\"/products/studio\">Foo Studio</a>\n                <ul>\n                    <li>\n                        <a href=\"/products/studio/customers\">Customer Stories</a>\n                    </li>\n                    <li>\n                        <a href=\"/products/studio/support\">Support</a>\n                    </li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <a title=\"About us\" href=\"/company/about\">Company</a>\n        <ul>\n            <li>\n                <a href=\"/company/about/investors\">Investor Relations</a>\n            </li>\n            <li>\n                <a class=\"rss\" href=\"/company/news\">News</a>\n                <ul>\n                    <li>\n                        <a href=\"/company/news/press\">Press Releases</a>\n                    </li>\n                    <li>\n                        <a href=\"/archive\">Archive</a>\n                    </li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <a href=\"/community\">Community</a>\n        <ul>\n            <li>\n                <a href=\"/community/account\">My Account</a>\n            </li>\n            <li>\n                <a class=\"external\" href=\"http://forums.example.com/\">Forums</a>\n            </li>\n        </ul>\n    </li>\n</ul>\n\n\n\nCalling renderMenu() directly\n\n\nThis example shows how to render a menu that is not registered in the view\nhelper by calling \nrenderMenu()\n directly and specifying options.\n\n\n<?php\n// render only the 'Community' menu\n$community = $this->navigation()->findOneByLabel('Community');\n$options = [\n    'indent'  => 16,\n    'ulClass' => 'community'\n];\necho $this->navigation()\n          ->menu()\n          ->renderMenu($community, $options);\n?>\n\n\n\nOutput:\n\n\n<ul class=\"community\">\n    <li>\n        <a href=\"/community/account\">My Account</a>\n    </li>\n    <li>\n        <a class=\"external\" href=\"http://forums.example.com/\">Forums</a>\n    </li>\n</ul>\n\n\n\nRendering the deepest active menu\n\n\nThis example shows how \nrenderSubMenu()\n will render the deepest sub menu of\nthe active branch.\n\n\nCalling \nrenderSubMenu($container, $ulClass, $indent)\n is equivalent to calling\n\nrenderMenu($container, $options)\n with the following options:\n\n\n[\n    'ulClass'          => $ulClass,\n    'indent'           => $indent,\n    'minDepth'         => null,\n    'maxDepth'         => null,\n    'onlyActiveBranch' => true,\n    'renderParents'    => false,\n]\n\n\n\n<?= $this->navigation()\n    ->menu()\n    ->renderSubMenu(null, 'sidebar', 4) ?>\n\n\n\nThe output will be the same if 'FAQ' or 'Foo Server' is active:\n\n\n<ul class=\"sidebar\">\n    <li class=\"active\">\n        <a href=\"/products/server/faq\">FAQ</a>\n    </li>\n    <li>\n        <a href=\"/products/server/editions\">Editions</a>\n    </li>\n    <li>\n        <a href=\"/products/server/requirements\">System Requirements</a>\n    </li>\n</ul>\n\n\n\nRendering with maximum depth\n\n\n<?= $this->navigation()\n    ->menu()\n    ->setMaxDepth(1) ?>\n\n\n\nOutput:\n\n\n<ul class=\"navigation\">\n    <li>\n        <a title=\"Go Home\" href=\"/\">Home</a>\n    </li>\n    <li class=\"active\">\n        <a href=\"/products\">Products</a>\n        <ul>\n            <li class=\"active\">\n                <a href=\"/products/server\">Foo Server</a>\n            </li>\n            <li>\n                <a href=\"/products/studio\">Foo Studio</a>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <a title=\"About us\" href=\"/company/about\">Company</a>\n        <ul>\n            <li>\n                <a href=\"/company/about/investors\">Investor Relations</a>\n            </li>\n            <li>\n                <a class=\"rss\" href=\"/company/news\">News</a>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <a href=\"/community\">Community</a>\n        <ul>\n            <li>\n                <a href=\"/community/account\">My Account</a>\n            </li>\n            <li>\n                <a class=\"external\" href=\"http://forums.example.com/\">Forums</a>\n            </li>\n        </ul>\n    </li>\n</ul>\n\n\n\nRendering with minimum depth\n\n\n<?= $this->navigation()\n    ->menu()\n    ->setMinDepth(1) ?>\n\n\n\nOutput:\n\n\n<ul class=\"navigation\">\n    <li class=\"active\">\n        <a href=\"/products/server\">Foo Server</a>\n        <ul>\n            <li class=\"active\">\n                <a href=\"/products/server/faq\">FAQ</a>\n            </li>\n            <li>\n                <a href=\"/products/server/editions\">Editions</a>\n            </li>\n            <li>\n                <a href=\"/products/server/requirements\">System Requirements</a>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <a href=\"/products/studio\">Foo Studio</a>\n        <ul>\n            <li>\n                <a href=\"/products/studio/customers\">Customer Stories</a>\n            </li>\n            <li>\n                <a href=\"/products/studio/support\">Support</a>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <a href=\"/company/about/investors\">Investor Relations</a>\n    </li>\n    <li>\n        <a class=\"rss\" href=\"/company/news\">News</a>\n        <ul>\n            <li>\n                <a href=\"/company/news/press\">Press Releases</a>\n            </li>\n            <li>\n                <a href=\"/archive\">Archive</a>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <a href=\"/community/account\">My Account</a>\n    </li>\n    <li>\n        <a class=\"external\" href=\"http://forums.example.com/\">Forums</a>\n    </li>\n</ul>\n\n\n\nRendering only the active branch\n\n\n<?= $this->navigation()\n    ->menu()\n    ->setOnlyActiveBranch(true) ?>\n\n\n\nOutput:\n\n\n<ul class=\"navigation\">\n    <li class=\"active\">\n        <a href=\"/products\">Products</a>\n        <ul>\n            <li class=\"active\">\n                <a href=\"/products/server\">Foo Server</a>\n                <ul>\n                    <li class=\"active\">\n                        <a href=\"/products/server/faq\">FAQ</a>\n                    </li>\n                    <li>\n                        <a href=\"/products/server/editions\">Editions</a>\n                    </li>\n                    <li>\n                        <a href=\"/products/server/requirements\">System Requirements</a>\n                    </li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n</ul>\n\n\n\nRendering only the active branch with minimum depth\n\n\n<?= $this->navigation()\n    ->menu()\n    ->setOnlyActiveBranch(true)\n    ->setMinDepth(1) ?>\n\n\n\nOutput:\n\n\n<ul class=\"navigation\">\n    <li class=\"active\">\n        <a href=\"/products/server\">Foo Server</a>\n        <ul>\n            <li class=\"active\">\n                <a href=\"/products/server/faq\">FAQ</a>\n            </li>\n            <li>\n                <a href=\"/products/server/editions\">Editions</a>\n            </li>\n            <li>\n                <a href=\"/products/server/requirements\">System Requirements</a>\n            </li>\n        </ul>\n    </li>\n</ul>\n\n\n\nRendering only the active branch with maximum depth\n\n\n<?= $this->navigation()\n    ->menu()\n    ->setOnlyActiveBranch(true)\n    ->setMaxDepth(1) ?>\n\n\n\nOutput:\n\n\n<ul class=\"navigation\">\n    <li class=\"active\">\n        <a href=\"/products\">Products</a>\n        <ul>\n            <li class=\"active\">\n                <a href=\"/products/server\">Foo Server</a>\n            </li>\n            <li>\n                <a href=\"/products/studio\">Foo Studio</a>\n            </li>\n        </ul>\n    </li>\n</ul>\n\n\n\nRendering only the active branch with maximum depth and no parents\n\n\n<?= $this->navigation()\n    ->menu()\n    ->setOnlyActiveBranch(true)\n    ->setRenderParents(false)\n    ->setMaxDepth(1) ?>\n\n\n\nOutput:\n\n\n<ul class=\"navigation\">\n    <li class=\"active\">\n        <a href=\"/products/server\">Foo Server</a>\n    </li>\n    <li>\n        <a href=\"/products/studio\">Foo Studio</a>\n    </li>\n</ul>\n\n\n\nRendering a custom menu using a partial view script\n\n\nThis example shows how to render a custom menu using a partial view script. By\ncalling \nsetPartial()\n, you can specify a partial view script that will be used\nwhen calling \nrender()\n; when a partial is specified, that method will proxy to\nthe \nrenderPartial()\n method.\n\n\nThe \nrenderPartial()\n  method will assign the container to the view with the key\n\ncontainer\n.\n\n\nIn a layout:\n\n\n$this->navigation()->menu()->setPartial('my-module/partials/menu');\necho $this->navigation()->menu()->render();\n\n\n\nIn \nmodule/MyModule/view/my-module/partials/menu.phtml\n:\n\n\nforeach ($this->container as $page) {\n    echo $this->navigation()->menu()->htmlify($page) . PHP_EOL;\n}\n\n\n\nOutput:\n\n\n<a title=\"Go Home\" href=\"/\">Home</a>\n<a href=\"/products\">Products</a>\n<a title=\"About us\" href=\"/company/about\">Company</a>\n<a href=\"/community\">Community</a>\n\n\n\nUsing additional parameters in partial view scripts\n\n\nStarting with version 2.6.0, you can assign custom variables to a\npartial script.\n\n\nIn a layout:\n\n\n// Set partial\n$this->navigation()->menu()->setPartial('my-module/partials/menu');\n\n// Output menu\necho $this->navigation()->menu()->renderPartialWithParams(\n    [\n        'headline' => 'Links',\n    ]\n);\n\n\n\nIn \nmodule/MyModule/view/my-module/partials/menu.phtml\n:\n\n\n<h1><?= $headline ?></h1>\n\n<?php\nforeach ($this->container as $page) {\n    echo $this->navigation()->menu()->htmlify($page) . PHP_EOL;\n}\n?>\n\n\n\nOutput:\n\n\n<h1>Links</h1>\n<a title=\"Go Home\" href=\"/\">Home</a>\n<a href=\"/products\">Products</a>\n<a title=\"About us\" href=\"/company/about\">Company</a>\n<a href=\"/community\">Community</a>\n\n\n\nUsing menu options in partial view scripts\n\n\nIn a layout:\n\n\n// Set options\n$this->navigation()->menu()\n    ->setUlClass('my-nav')\n    ->setPartial('my-module/partials/menu');\n\n// Output menu\necho $this->navigation()->menu()->render();\n\n\n\nIn \nmodule/MyModule/view/my-module/partials/menu.phtml\n:\n\n\n<div class\"<?= $this->navigation()->menu()->getUlClass() ?>\">\n    <?php\n    foreach ($this->container as $page) {\n        echo $this->navigation()->menu()->htmlify($page) . PHP_EOL;\n    }\n    ?>\n</div>\n\n\n\nOutput:\n\n\n<div class=\"my-nav\">\n    <a title=\"Go Home\" href=\"/\">Home</a>\n    <a href=\"/products\">Products</a>\n    <a title=\"About us\" href=\"/company/about\">Company</a>\n    <a href=\"/community\">Community</a>\n</div>\n\n\n\nUsing ACLs with partial view scripts\n\n\nIf you want to use an ACL within your partial view script, then you will have to\ncheck the access to a page manually.\n\n\nIn \nmodule/MyModule/view/my-module/partials/menu.phtml\n:\n\n\nforeach ($this->container as $page) {\n    if ($this->navigation()->accept($page)) {\n        echo $this->navigation()->menu()->htmlify($page) . PHP_EOL;\n    }\n}",
            "title": "Menu"
        },
        {
            "location": "/helpers/menu/#menu",
            "text": "The  menu()  helper is used for rendering menus from navigation containers. By\ndefault, the menu will be rendered using HTML  UL  and  LI  tags, but the helper\nalso allows using a partial view script.  Methods in the Menu helper:     Method signature  Description      getUlClass() : string  Retrieve the CSS class used when rendering  ul  elements in  renderMenu() .    setUlClass(string $class) : self  Set the CSS class to use when rendering  ul  elements in  renderMenu() .    getOnlyActiveBranch() : bool  Retrieve the flag specifying whether or not to render only the active branch of a container.    setOnlyActiveBranch(bool $flag) : self  Set the flag specifying whether or not to render only the active branch of a container.    getRenderParents() : bool  Retrieve the flag specifying whether or not to render parent pages when rendering the active branch of a container.    setRenderParents(bool $flag) : self  Set the flag specifying whether or not to render parent pages when rendering the active branch of a container. When set to  false , only the deepest active menu will be rendered.    getPartial() : string|array  Retrieve a partial view script that should be used for rendering breadcrumbs. If a partial view script is set, the helper's  render()  method will use the  renderPartial()  method. The helper expects the partial to be a  string  or an  array  with two elements. If the partial is a  string , it denotes the name of the partial script to use. If it is an  array , the first element will be used as the name of the partial view script, and the second element is the module where the script is found.    setPartial(string|array $partial) : self  Set the partial view script to use when rendering breadcrumbs; see  getPartial()  for acceptable values.    htmlify(/* ... */) : string  Overrides the method from the abstract class, with the argument list  AbstractPage $page, bool $escapeLabel = true, bool $addClassToListItem = false . Returns  span  elements if the page has no  href .    renderMenu(AbstractContainer $container = null, $options = []) : string  Default rendering method; renders a container as an HTML  UL  list. If  $container  is not given, the container registered in the helper will be rendered.   $options  is used for overriding options specified temporarily without resetting the values in the helper instance; if none are set, those already provided to the helper will be used. Options are an associative array where each key corresponds to an option in the helper. See the table below for recognized options.    renderPartial(AbstractContainer $container = null, string|array $partial = null) : string  Used for rendering the menu using a partial view script.    renderSubMenu(/* ... */) : string  Renders the deepest menu level of a container's active branch. Accepts the arguments  AbstractContainer $container ,  string $ulClass = null ,  string|int $indent = null  (an integer value indicates number of spaces to use),  string $liActiveClass = null .     The following are options recognized by the  renderMenu()  method:     Option name  Description      indent  Indentation. Expects a  string  or an  int  value.    minDepth  Minimum depth. Expects an  int  or  null  (no minimum depth).    maxDepth  Maximum depth. Expects an  int  or  null  (no maximum depth).    ulClass  CSS class for  ul  element. Expects a  string .    onlyActiveBranch  Whether only active branch should be rendered. Expects a  boolean  value.    renderParents  Whether parents should be rendered if only rendering active branch. Expects a  boolean  value.",
            "title": "Menu"
        },
        {
            "location": "/helpers/menu/#basic-usage",
            "text": "This example shows how to render a menu from a container registered/found in the\nview helper. Notice how pages are filtered out based on visibility and ACL.  In a view script or layout:  <?= $this->navigation()->menu()->render() ?>  Or:  <?= $this->navigation()->menu() ?>  Output:  <ul class=\"navigation\">\n    <li>\n        <a title=\"Go Home\" href=\"/\">Home</a>\n    </li>\n    <li class=\"active\">\n        <a href=\"/products\">Products</a>\n        <ul>\n            <li class=\"active\">\n                <a href=\"/products/server\">Foo Server</a>\n                <ul>\n                    <li class=\"active\">\n                        <a href=\"/products/server/faq\">FAQ</a>\n                    </li>\n                    <li>\n                        <a href=\"/products/server/editions\">Editions</a>\n                    </li>\n                    <li>\n                        <a href=\"/products/server/requirements\">System Requirements</a>\n                    </li>\n                </ul>\n            </li>\n            <li>\n                <a href=\"/products/studio\">Foo Studio</a>\n                <ul>\n                    <li>\n                        <a href=\"/products/studio/customers\">Customer Stories</a>\n                    </li>\n                    <li>\n                        <a href=\"/products/studio/support\">Support</a>\n                    </li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <a title=\"About us\" href=\"/company/about\">Company</a>\n        <ul>\n            <li>\n                <a href=\"/company/about/investors\">Investor Relations</a>\n            </li>\n            <li>\n                <a class=\"rss\" href=\"/company/news\">News</a>\n                <ul>\n                    <li>\n                        <a href=\"/company/news/press\">Press Releases</a>\n                    </li>\n                    <li>\n                        <a href=\"/archive\">Archive</a>\n                    </li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <a href=\"/community\">Community</a>\n        <ul>\n            <li>\n                <a href=\"/community/account\">My Account</a>\n            </li>\n            <li>\n                <a class=\"external\" href=\"http://forums.example.com/\">Forums</a>\n            </li>\n        </ul>\n    </li>\n</ul>",
            "title": "Basic usage"
        },
        {
            "location": "/helpers/menu/#calling-rendermenu-directly",
            "text": "This example shows how to render a menu that is not registered in the view\nhelper by calling  renderMenu()  directly and specifying options.  <?php\n// render only the 'Community' menu\n$community = $this->navigation()->findOneByLabel('Community');\n$options = [\n    'indent'  => 16,\n    'ulClass' => 'community'\n];\necho $this->navigation()\n          ->menu()\n          ->renderMenu($community, $options);\n?>  Output:  <ul class=\"community\">\n    <li>\n        <a href=\"/community/account\">My Account</a>\n    </li>\n    <li>\n        <a class=\"external\" href=\"http://forums.example.com/\">Forums</a>\n    </li>\n</ul>",
            "title": "Calling renderMenu() directly"
        },
        {
            "location": "/helpers/menu/#rendering-the-deepest-active-menu",
            "text": "This example shows how  renderSubMenu()  will render the deepest sub menu of\nthe active branch.  Calling  renderSubMenu($container, $ulClass, $indent)  is equivalent to calling renderMenu($container, $options)  with the following options:  [\n    'ulClass'          => $ulClass,\n    'indent'           => $indent,\n    'minDepth'         => null,\n    'maxDepth'         => null,\n    'onlyActiveBranch' => true,\n    'renderParents'    => false,\n]  <?= $this->navigation()\n    ->menu()\n    ->renderSubMenu(null, 'sidebar', 4) ?>  The output will be the same if 'FAQ' or 'Foo Server' is active:  <ul class=\"sidebar\">\n    <li class=\"active\">\n        <a href=\"/products/server/faq\">FAQ</a>\n    </li>\n    <li>\n        <a href=\"/products/server/editions\">Editions</a>\n    </li>\n    <li>\n        <a href=\"/products/server/requirements\">System Requirements</a>\n    </li>\n</ul>",
            "title": "Rendering the deepest active menu"
        },
        {
            "location": "/helpers/menu/#rendering-with-maximum-depth",
            "text": "<?= $this->navigation()\n    ->menu()\n    ->setMaxDepth(1) ?>  Output:  <ul class=\"navigation\">\n    <li>\n        <a title=\"Go Home\" href=\"/\">Home</a>\n    </li>\n    <li class=\"active\">\n        <a href=\"/products\">Products</a>\n        <ul>\n            <li class=\"active\">\n                <a href=\"/products/server\">Foo Server</a>\n            </li>\n            <li>\n                <a href=\"/products/studio\">Foo Studio</a>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <a title=\"About us\" href=\"/company/about\">Company</a>\n        <ul>\n            <li>\n                <a href=\"/company/about/investors\">Investor Relations</a>\n            </li>\n            <li>\n                <a class=\"rss\" href=\"/company/news\">News</a>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <a href=\"/community\">Community</a>\n        <ul>\n            <li>\n                <a href=\"/community/account\">My Account</a>\n            </li>\n            <li>\n                <a class=\"external\" href=\"http://forums.example.com/\">Forums</a>\n            </li>\n        </ul>\n    </li>\n</ul>",
            "title": "Rendering with maximum depth"
        },
        {
            "location": "/helpers/menu/#rendering-with-minimum-depth",
            "text": "<?= $this->navigation()\n    ->menu()\n    ->setMinDepth(1) ?>  Output:  <ul class=\"navigation\">\n    <li class=\"active\">\n        <a href=\"/products/server\">Foo Server</a>\n        <ul>\n            <li class=\"active\">\n                <a href=\"/products/server/faq\">FAQ</a>\n            </li>\n            <li>\n                <a href=\"/products/server/editions\">Editions</a>\n            </li>\n            <li>\n                <a href=\"/products/server/requirements\">System Requirements</a>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <a href=\"/products/studio\">Foo Studio</a>\n        <ul>\n            <li>\n                <a href=\"/products/studio/customers\">Customer Stories</a>\n            </li>\n            <li>\n                <a href=\"/products/studio/support\">Support</a>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <a href=\"/company/about/investors\">Investor Relations</a>\n    </li>\n    <li>\n        <a class=\"rss\" href=\"/company/news\">News</a>\n        <ul>\n            <li>\n                <a href=\"/company/news/press\">Press Releases</a>\n            </li>\n            <li>\n                <a href=\"/archive\">Archive</a>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <a href=\"/community/account\">My Account</a>\n    </li>\n    <li>\n        <a class=\"external\" href=\"http://forums.example.com/\">Forums</a>\n    </li>\n</ul>",
            "title": "Rendering with minimum depth"
        },
        {
            "location": "/helpers/menu/#rendering-only-the-active-branch",
            "text": "<?= $this->navigation()\n    ->menu()\n    ->setOnlyActiveBranch(true) ?>  Output:  <ul class=\"navigation\">\n    <li class=\"active\">\n        <a href=\"/products\">Products</a>\n        <ul>\n            <li class=\"active\">\n                <a href=\"/products/server\">Foo Server</a>\n                <ul>\n                    <li class=\"active\">\n                        <a href=\"/products/server/faq\">FAQ</a>\n                    </li>\n                    <li>\n                        <a href=\"/products/server/editions\">Editions</a>\n                    </li>\n                    <li>\n                        <a href=\"/products/server/requirements\">System Requirements</a>\n                    </li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n</ul>",
            "title": "Rendering only the active branch"
        },
        {
            "location": "/helpers/menu/#rendering-only-the-active-branch-with-minimum-depth",
            "text": "<?= $this->navigation()\n    ->menu()\n    ->setOnlyActiveBranch(true)\n    ->setMinDepth(1) ?>  Output:  <ul class=\"navigation\">\n    <li class=\"active\">\n        <a href=\"/products/server\">Foo Server</a>\n        <ul>\n            <li class=\"active\">\n                <a href=\"/products/server/faq\">FAQ</a>\n            </li>\n            <li>\n                <a href=\"/products/server/editions\">Editions</a>\n            </li>\n            <li>\n                <a href=\"/products/server/requirements\">System Requirements</a>\n            </li>\n        </ul>\n    </li>\n</ul>",
            "title": "Rendering only the active branch with minimum depth"
        },
        {
            "location": "/helpers/menu/#rendering-only-the-active-branch-with-maximum-depth",
            "text": "<?= $this->navigation()\n    ->menu()\n    ->setOnlyActiveBranch(true)\n    ->setMaxDepth(1) ?>  Output:  <ul class=\"navigation\">\n    <li class=\"active\">\n        <a href=\"/products\">Products</a>\n        <ul>\n            <li class=\"active\">\n                <a href=\"/products/server\">Foo Server</a>\n            </li>\n            <li>\n                <a href=\"/products/studio\">Foo Studio</a>\n            </li>\n        </ul>\n    </li>\n</ul>",
            "title": "Rendering only the active branch with maximum depth"
        },
        {
            "location": "/helpers/menu/#rendering-only-the-active-branch-with-maximum-depth-and-no-parents",
            "text": "<?= $this->navigation()\n    ->menu()\n    ->setOnlyActiveBranch(true)\n    ->setRenderParents(false)\n    ->setMaxDepth(1) ?>  Output:  <ul class=\"navigation\">\n    <li class=\"active\">\n        <a href=\"/products/server\">Foo Server</a>\n    </li>\n    <li>\n        <a href=\"/products/studio\">Foo Studio</a>\n    </li>\n</ul>",
            "title": "Rendering only the active branch with maximum depth and no parents"
        },
        {
            "location": "/helpers/menu/#rendering-a-custom-menu-using-a-partial-view-script",
            "text": "This example shows how to render a custom menu using a partial view script. By\ncalling  setPartial() , you can specify a partial view script that will be used\nwhen calling  render() ; when a partial is specified, that method will proxy to\nthe  renderPartial()  method.  The  renderPartial()   method will assign the container to the view with the key container .  In a layout:  $this->navigation()->menu()->setPartial('my-module/partials/menu');\necho $this->navigation()->menu()->render();  In  module/MyModule/view/my-module/partials/menu.phtml :  foreach ($this->container as $page) {\n    echo $this->navigation()->menu()->htmlify($page) . PHP_EOL;\n}  Output:  <a title=\"Go Home\" href=\"/\">Home</a>\n<a href=\"/products\">Products</a>\n<a title=\"About us\" href=\"/company/about\">Company</a>\n<a href=\"/community\">Community</a>",
            "title": "Rendering a custom menu using a partial view script"
        },
        {
            "location": "/helpers/menu/#using-additional-parameters-in-partial-view-scripts",
            "text": "Starting with version 2.6.0, you can assign custom variables to a\npartial script.  In a layout:  // Set partial\n$this->navigation()->menu()->setPartial('my-module/partials/menu');\n\n// Output menu\necho $this->navigation()->menu()->renderPartialWithParams(\n    [\n        'headline' => 'Links',\n    ]\n);  In  module/MyModule/view/my-module/partials/menu.phtml :  <h1><?= $headline ?></h1>\n\n<?php\nforeach ($this->container as $page) {\n    echo $this->navigation()->menu()->htmlify($page) . PHP_EOL;\n}\n?>  Output:  <h1>Links</h1>\n<a title=\"Go Home\" href=\"/\">Home</a>\n<a href=\"/products\">Products</a>\n<a title=\"About us\" href=\"/company/about\">Company</a>\n<a href=\"/community\">Community</a>",
            "title": "Using additional parameters in partial view scripts"
        },
        {
            "location": "/helpers/menu/#using-menu-options-in-partial-view-scripts",
            "text": "In a layout:  // Set options\n$this->navigation()->menu()\n    ->setUlClass('my-nav')\n    ->setPartial('my-module/partials/menu');\n\n// Output menu\necho $this->navigation()->menu()->render();  In  module/MyModule/view/my-module/partials/menu.phtml :  <div class\"<?= $this->navigation()->menu()->getUlClass() ?>\">\n    <?php\n    foreach ($this->container as $page) {\n        echo $this->navigation()->menu()->htmlify($page) . PHP_EOL;\n    }\n    ?>\n</div>  Output:  <div class=\"my-nav\">\n    <a title=\"Go Home\" href=\"/\">Home</a>\n    <a href=\"/products\">Products</a>\n    <a title=\"About us\" href=\"/company/about\">Company</a>\n    <a href=\"/community\">Community</a>\n</div>",
            "title": "Using menu options in partial view scripts"
        },
        {
            "location": "/helpers/menu/#using-acls-with-partial-view-scripts",
            "text": "If you want to use an ACL within your partial view script, then you will have to\ncheck the access to a page manually.  In  module/MyModule/view/my-module/partials/menu.phtml :  foreach ($this->container as $page) {\n    if ($this->navigation()->accept($page)) {\n        echo $this->navigation()->menu()->htmlify($page) . PHP_EOL;\n    }\n}",
            "title": "Using ACLs with partial view scripts"
        },
        {
            "location": "/helpers/sitemap/",
            "text": "View Helper - Sitemap\n\n\nThe \nsitemap()\n helper is used for generating XML sitemaps, as defined by the\n\nSitemaps XML format\n. Read more about\n\nSitemaps on Wikipedia\n.\n\n\nBy default, the sitemap helper uses \nsitemap validators\n\nto validate each element that is rendered. This can be disabled by calling\n\n$helper->setUseSitemapValidators(false)\n.\n\n\nSitemap XML elements\n\n\n\n\n\n\n\n\nElement\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nloc\n\n\nstring\n\n\nAbsolute URL to page. An absolute URL will be generated by the helper.\n\n\n\n\n\n\nlastmod\n\n\nstring\n\n\nThe date of last modification of the file, in W3C Datetime format. This time portion can be omitted if desired, and only use YYYY-MM-DD. The helper will try to retrieve the lastmod value from the page's custom property lastmod if it is set in the page. If the value is not a valid date, it is ignored.\n\n\n\n\n\n\nchangefreq\n\n\nstring\n\n\nHow frequently the page is likely to change. This value provides general information to search engines and may not correlate exactly to how often they crawl the page. Valid values are: \"always\", \"hourly\", \"daily\", \"weekly\", \"monthly\", \"yearly\", and \"never\". The helper will try to retrieve the changefreq value from the page's custom property changefreq if it is set in the page. If the value is not valid, it is ignored.\n\n\n\n\n\n\npriority\n\n\nfloat\n\n\nThe priority of this URL relative to other URLs on your site. Valid values range from 0.0 to 1.0. The helper will try to retrieve the priority value from the page's custom property priority if it is set in the page. If the value is not valid, it is ignored.\n\n\n\n\n\n\n\n\n\n\nValidation only when enabled\n\n\nIf you disable sitemap validators, the custom properties (see table) are not\nvalidated at all.\n\n\n\n\nThe sitemap helper also supports \nSitemap XSD Schema\n\nvalidation of the generated sitemap. This is disabled by default, since it will\nrequire a request to the schema file. It can be enabled with\n\n$helper->setUseSchemaValidation(true)\n.\n\n\nMethods in the sitemap helper:\n\n\n\n\n\n\n\n\nMethod signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngetFormatOutput() : bool\n\n\nRetrieve the flag indicating whether or not generated XML should be formatted. Default is \nfalse\n.\n\n\n\n\n\n\nsetFormatOutput(bool $flag) : self\n\n\nSet the flag indicating whether or not generated XML should be formatted. The flag corresponds to the the \nformatOutput\n property of the native \nDOMDocument\n class. Read more in the \nDOMDocument documentation\n.\n\n\n\n\n\n\ngetUseXmlDeclaration() : bool\n\n\nRetrieve the flag indicating whether or not to emit the XML declaration when rendering; defaults to \ntrue\n.\n\n\n\n\n\n\nsetUseXmlDeclaration(bool $flag) : self\n\n\nSet the flag indicating whether or not to emit the XML declaration when rendering.\n\n\n\n\n\n\ngetUseSitemapValidators() : bool\n\n\nRetrieve the flag indicating whether or not sitemap validators should be used when generating the DOM; default is \ntrue\n.\n\n\n\n\n\n\nsetUseSitemapValidators(bool $flag) : self\n\n\nSet the flag indicating whether or not sitemap validators should be used when generating the DOM.\n\n\n\n\n\n\ngetUseSchemaValidation() : bool\n\n\nRetrieve the flag indicating whether or not the helper should use XML schema validation when generating the DOM; default is \nfalse\n.\n\n\n\n\n\n\nsetUseSchemaValidation(bool $flag) : self\n\n\nSet the flag indicating whether or not the helper should use XML schema validation when generating the DOM.\n\n\n\n\n\n\ngetServerUrl() : string\n\n\nRetrieve the server URL to prepend to non-absolute URIs via the \nurl()\n method; if none is present, it will be determined by the helper.\n\n\n\n\n\n\nsetServerUrl(string $url) : self\n\n\nSet the base server URL to prepend to non-absolute URIs.\n\n\n\n\n\n\nurl(AbstractPage $page) : string\n\n\nGenerate an absolute URL for the provided page.\n\n\n\n\n\n\ngetDomSitemap(AbstractContainer = null) : DOMDocument\n\n\nGenerates a DOMDocument sitemap representation from the given container.\n\n\n\n\n\n\n\n\nBasic usage\n\n\nThis example shows how to render an \nXML\n sitemap based on the setup we did further up.\n\n\n// In a view script or layout:\n\n// format output\n$this->navigation()\n      ->sitemap()\n      ->setFormatOutput(true); // default is false\n\n// Other possible methods:\n// ->setUseXmlDeclaration(false);             // default is true\n// ->setServerUrl('http://my.otherhost.com'); // default is to detect automatically\n\n// print sitemap\necho $this->navigation()->sitemap();\n\n\n\nNotice how pages that are invisible or pages with ACL roles incompatible with\nthe view helper are filtered out:\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>http://www.example.com/</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server/faq</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server/editions</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server/requirements</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/studio</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/studio/customers</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/studio/support</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/about</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/about/investors</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/news</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/news/press</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/archive</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/community</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/community/account</loc>\n  </url>\n  <url>\n    <loc>http://forums.example.com/</loc>\n  </url>\n</urlset>\n\n\n\nRendering using no ACL role\n\n\nRender the sitemap using no ACL role (should filter out \n/community/account\n):\n\n\necho $this->navigation()->sitemap()\n    ->setFormatOutput(true)\n    ->setRole();\n\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>http://www.example.com/</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server/faq</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server/editions</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server/requirements</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/studio</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/studio/customers</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/studio/support</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/about</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/about/investors</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/news</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/news/press</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/archive</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/community</loc>\n  </url>\n  <url>\n    <loc>http://forums.example.com/</loc>\n  </url>\n</urlset>\n\n\n\nRendering using a maximum depth\n\n\nRender the sitemap using a maximum depth of 1.\n\n\necho $this->navigation()->sitemap()\n    ->setFormatOutput(true)\n    ->setMaxDepth(1);\n\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>http://www.example.com/</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/studio</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/about</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/about/investors</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/news</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/community</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/community/account</loc>\n  </url>\n  <url>\n    <loc>http://forums.example.com/</loc>\n  </url>\n</urlset>\n\n\n\n\n\nUTF-8 encoding used by default\n\n\nBy default, zend-view uses UTF-8 as its default encoding.  If you want to use\nanother encoding with \nSitemap\n, you will have do three things:\n\n\n\n\nCreate a custom renderer and implement a \ngetEncoding()\n method.\n\n\nCreate a custom rendering strategy that will return an instance of your custom renderer.\n\n\nAttach the custom strategy in the \nViewEvent\n.\n\n\n\n\nSee the \nexample from the HeadStyle documentation\n\nto see how you can achieve this.",
            "title": "Sitemap"
        },
        {
            "location": "/helpers/sitemap/#view-helper-sitemap",
            "text": "The  sitemap()  helper is used for generating XML sitemaps, as defined by the Sitemaps XML format . Read more about Sitemaps on Wikipedia .  By default, the sitemap helper uses  sitemap validators \nto validate each element that is rendered. This can be disabled by calling $helper->setUseSitemapValidators(false) .",
            "title": "View Helper - Sitemap"
        },
        {
            "location": "/helpers/sitemap/#sitemap-xml-elements",
            "text": "Element  Type  Description      loc  string  Absolute URL to page. An absolute URL will be generated by the helper.    lastmod  string  The date of last modification of the file, in W3C Datetime format. This time portion can be omitted if desired, and only use YYYY-MM-DD. The helper will try to retrieve the lastmod value from the page's custom property lastmod if it is set in the page. If the value is not a valid date, it is ignored.    changefreq  string  How frequently the page is likely to change. This value provides general information to search engines and may not correlate exactly to how often they crawl the page. Valid values are: \"always\", \"hourly\", \"daily\", \"weekly\", \"monthly\", \"yearly\", and \"never\". The helper will try to retrieve the changefreq value from the page's custom property changefreq if it is set in the page. If the value is not valid, it is ignored.    priority  float  The priority of this URL relative to other URLs on your site. Valid values range from 0.0 to 1.0. The helper will try to retrieve the priority value from the page's custom property priority if it is set in the page. If the value is not valid, it is ignored.",
            "title": "Sitemap XML elements"
        },
        {
            "location": "/helpers/sitemap/#validation-only-when-enabled",
            "text": "If you disable sitemap validators, the custom properties (see table) are not\nvalidated at all.   The sitemap helper also supports  Sitemap XSD Schema \nvalidation of the generated sitemap. This is disabled by default, since it will\nrequire a request to the schema file. It can be enabled with $helper->setUseSchemaValidation(true) .  Methods in the sitemap helper:     Method signature  Description      getFormatOutput() : bool  Retrieve the flag indicating whether or not generated XML should be formatted. Default is  false .    setFormatOutput(bool $flag) : self  Set the flag indicating whether or not generated XML should be formatted. The flag corresponds to the the  formatOutput  property of the native  DOMDocument  class. Read more in the  DOMDocument documentation .    getUseXmlDeclaration() : bool  Retrieve the flag indicating whether or not to emit the XML declaration when rendering; defaults to  true .    setUseXmlDeclaration(bool $flag) : self  Set the flag indicating whether or not to emit the XML declaration when rendering.    getUseSitemapValidators() : bool  Retrieve the flag indicating whether or not sitemap validators should be used when generating the DOM; default is  true .    setUseSitemapValidators(bool $flag) : self  Set the flag indicating whether or not sitemap validators should be used when generating the DOM.    getUseSchemaValidation() : bool  Retrieve the flag indicating whether or not the helper should use XML schema validation when generating the DOM; default is  false .    setUseSchemaValidation(bool $flag) : self  Set the flag indicating whether or not the helper should use XML schema validation when generating the DOM.    getServerUrl() : string  Retrieve the server URL to prepend to non-absolute URIs via the  url()  method; if none is present, it will be determined by the helper.    setServerUrl(string $url) : self  Set the base server URL to prepend to non-absolute URIs.    url(AbstractPage $page) : string  Generate an absolute URL for the provided page.    getDomSitemap(AbstractContainer = null) : DOMDocument  Generates a DOMDocument sitemap representation from the given container.",
            "title": "Validation only when enabled"
        },
        {
            "location": "/helpers/sitemap/#basic-usage",
            "text": "This example shows how to render an  XML  sitemap based on the setup we did further up.  // In a view script or layout:\n\n// format output\n$this->navigation()\n      ->sitemap()\n      ->setFormatOutput(true); // default is false\n\n// Other possible methods:\n// ->setUseXmlDeclaration(false);             // default is true\n// ->setServerUrl('http://my.otherhost.com'); // default is to detect automatically\n\n// print sitemap\necho $this->navigation()->sitemap();  Notice how pages that are invisible or pages with ACL roles incompatible with\nthe view helper are filtered out:  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>http://www.example.com/</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server/faq</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server/editions</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server/requirements</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/studio</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/studio/customers</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/studio/support</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/about</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/about/investors</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/news</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/news/press</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/archive</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/community</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/community/account</loc>\n  </url>\n  <url>\n    <loc>http://forums.example.com/</loc>\n  </url>\n</urlset>",
            "title": "Basic usage"
        },
        {
            "location": "/helpers/sitemap/#rendering-using-no-acl-role",
            "text": "Render the sitemap using no ACL role (should filter out  /community/account ):  echo $this->navigation()->sitemap()\n    ->setFormatOutput(true)\n    ->setRole();  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>http://www.example.com/</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server/faq</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server/editions</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server/requirements</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/studio</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/studio/customers</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/studio/support</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/about</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/about/investors</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/news</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/news/press</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/archive</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/community</loc>\n  </url>\n  <url>\n    <loc>http://forums.example.com/</loc>\n  </url>\n</urlset>",
            "title": "Rendering using no ACL role"
        },
        {
            "location": "/helpers/sitemap/#rendering-using-a-maximum-depth",
            "text": "Render the sitemap using a maximum depth of 1.  echo $this->navigation()->sitemap()\n    ->setFormatOutput(true)\n    ->setMaxDepth(1);  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>http://www.example.com/</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/server</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/products/studio</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/about</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/about/investors</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/company/news</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/community</loc>\n  </url>\n  <url>\n    <loc>http://www.example.com/community/account</loc>\n  </url>\n  <url>\n    <loc>http://forums.example.com/</loc>\n  </url>\n</urlset>",
            "title": "Rendering using a maximum depth"
        },
        {
            "location": "/helpers/sitemap/#utf-8-encoding-used-by-default",
            "text": "By default, zend-view uses UTF-8 as its default encoding.  If you want to use\nanother encoding with  Sitemap , you will have do three things:   Create a custom renderer and implement a  getEncoding()  method.  Create a custom rendering strategy that will return an instance of your custom renderer.  Attach the custom strategy in the  ViewEvent .   See the  example from the HeadStyle documentation \nto see how you can achieve this.",
            "title": "UTF-8 encoding used by default"
        },
        {
            "location": "/helpers/navigation/",
            "text": "Navigation Proxy\n\n\nThe \nnavigation()\n helper is a proxy helper that relays calls to other\nnavigational helpers. It can be considered an entry point to all\nnavigation-related view tasks.\n\n\nThe \nNavigation\n helper finds other helpers that implement\n\nZend\\View\\Helper\\Navigation\\HelperInterface\n, which means custom view helpers\ncan also be proxied.  This would, however, require that the custom helper path\nis added to the view.\n\n\nWhen proxying to other helpers, the \nNavigation\n helper can inject its\ncontainer, ACL and optionally role, and a translator. This means that you won't\nhave to explicitly set all three in all navigational helpers, nor resort to\ninjecting by means of static methods.\n\n\nMethods\n\n\n\n\n\n\n\n\nMethod signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfindHelper(string $helper, bool $strict = true) : Navigation\\HelperInterface\n\n\nFinds the given helper, verifies that it is a navigational helper, and injects the current container, ACL and role instances,  and translator, if present. If \n$strict\n is \ntrue\n, the method will raise an exception when unable to find a valid helper.\n\n\n\n\n\n\ngetInjectContainer() : bool\n\n\nRetrieve the flag indicating whether or not to inject the current container into proxied helpers; default is \ntrue\n.\n\n\n\n\n\n\nsetInjectContainer(bool $flag) : self\n\n\nSet the flag indicating whether or not to inject the current container into proxied helpers.\n\n\n\n\n\n\ngetInjectAcl() : bool\n\n\nRetrieve the flag indicating whether or not to inject ACL and role instances into proxied helpers; default is \ntrue\n.\n\n\n\n\n\n\nsetInjectAcl(bool $flag) : self\n\n\nSet the flag indicating whether or not to inject ACL and role instances into proxied helpers.\n\n\n\n\n\n\ngetInjectTranslator() : bool\n\n\nRetrieve the flag indicating whether or not to inject the current translator instance into proxied helpers; default is \ntrue\n.\n\n\n\n\n\n\nsetInjectTranslator(bool $flag) : self\n\n\nSet the flag indicating whether or not to inject the current translator instance into proxied helpers.\n\n\n\n\n\n\ngetDefaultProxy() : string\n\n\nRetrieve the default proxy helper to delegate to when rendering; defaults to \nmenu\n.\n\n\n\n\n\n\nsetDefaultProxy(string $helper) : self\n\n\nSet the default proxy helper to delegate to when rendering.\n\n\n\n\n\n\nrender(AbstractContainer = null)\n\n\nProxies to the render method of the default proxy.",
            "title": "Navigation Proxy"
        },
        {
            "location": "/helpers/navigation/#navigation-proxy",
            "text": "The  navigation()  helper is a proxy helper that relays calls to other\nnavigational helpers. It can be considered an entry point to all\nnavigation-related view tasks.  The  Navigation  helper finds other helpers that implement Zend\\View\\Helper\\Navigation\\HelperInterface , which means custom view helpers\ncan also be proxied.  This would, however, require that the custom helper path\nis added to the view.  When proxying to other helpers, the  Navigation  helper can inject its\ncontainer, ACL and optionally role, and a translator. This means that you won't\nhave to explicitly set all three in all navigational helpers, nor resort to\ninjecting by means of static methods.",
            "title": "Navigation Proxy"
        },
        {
            "location": "/helpers/navigation/#methods",
            "text": "Method signature  Description      findHelper(string $helper, bool $strict = true) : Navigation\\HelperInterface  Finds the given helper, verifies that it is a navigational helper, and injects the current container, ACL and role instances,  and translator, if present. If  $strict  is  true , the method will raise an exception when unable to find a valid helper.    getInjectContainer() : bool  Retrieve the flag indicating whether or not to inject the current container into proxied helpers; default is  true .    setInjectContainer(bool $flag) : self  Set the flag indicating whether or not to inject the current container into proxied helpers.    getInjectAcl() : bool  Retrieve the flag indicating whether or not to inject ACL and role instances into proxied helpers; default is  true .    setInjectAcl(bool $flag) : self  Set the flag indicating whether or not to inject ACL and role instances into proxied helpers.    getInjectTranslator() : bool  Retrieve the flag indicating whether or not to inject the current translator instance into proxied helpers; default is  true .    setInjectTranslator(bool $flag) : self  Set the flag indicating whether or not to inject the current translator instance into proxied helpers.    getDefaultProxy() : string  Retrieve the default proxy helper to delegate to when rendering; defaults to  menu .    setDefaultProxy(string $helper) : self  Set the default proxy helper to delegate to when rendering.    render(AbstractContainer = null)  Proxies to the render method of the default proxy.",
            "title": "Methods"
        }
    ]
}